{"ast":null,"code":"/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we`re using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\n\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'https://playlister-project.herokuapp.com/api/'\n});\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createPlaylist = (newListName, newSongs, userEmail, username, publishedDate, listens, likers, dislikers, comments) => {\n  return api.post(`/playlist/`, {\n    // SPECIFY THE PAYLOAD\n    name: newListName,\n    songs: newSongs,\n    ownerEmail: userEmail,\n    ownerUsername: username,\n    publishedDate: publishedDate,\n    listens: listens,\n    likers: likers,\n    dislikers: dislikers,\n    comments: comments\n  });\n};\nexport const deletePlaylistById = id => api.delete(`/playlist/${id}`);\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const getPlaylistPairs = () => api.get(`/playlistpairs/`);\nexport const getPlaylists = () => api.get(`/playlists/`);\nexport const updatePlaylistById = (id, playlist) => {\n  return api.put(`/playlist/${id}`, {\n    // SPECIFY THE PAYLOAD\n    playlist: playlist\n  });\n};\nconst apis = {\n  createPlaylist,\n  deletePlaylistById,\n  getPlaylistById,\n  getPlaylistPairs,\n  getPlaylists,\n  updatePlaylistById\n};\nexport default apis;","map":{"version":3,"names":["axios","defaults","withCredentials","api","create","baseURL","createPlaylist","newListName","newSongs","userEmail","username","publishedDate","listens","likers","dislikers","comments","post","name","songs","ownerEmail","ownerUsername","deletePlaylistById","id","delete","getPlaylistById","get","getPlaylistPairs","getPlaylists","updatePlaylistById","playlist","put","apis"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/store/store-request-api/index.js"],"sourcesContent":["/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we`re using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\nimport axios from 'axios'\r\naxios.defaults.withCredentials = true;\r\nconst api = axios.create({\r\n    baseURL: 'https://playlister-project.herokuapp.com/api/',\r\n})\r\n\r\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\r\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\r\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\r\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\r\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\r\n// CUSTOM FILTERS FOR QUERIES\r\nexport const createPlaylist = (newListName, newSongs, userEmail, username, publishedDate, listens, likers, dislikers, comments) => {\r\n    return api.post(`/playlist/`, {\r\n        // SPECIFY THE PAYLOAD\r\n        name: newListName,\r\n        songs: newSongs,\r\n        ownerEmail: userEmail,\r\n        ownerUsername: username,\r\n        publishedDate: publishedDate,\r\n        listens: listens,\r\n        likers: likers,\r\n        dislikers: dislikers,\r\n        comments: comments\r\n    })\r\n}\r\nexport const deletePlaylistById = (id) => api.delete(`/playlist/${id}`)\r\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`)\r\nexport const getPlaylistPairs = () => api.get(`/playlistpairs/`)\r\nexport const getPlaylists = () => api.get(`/playlists/`)\r\nexport const updatePlaylistById = (id, playlist) => {\r\n    return api.put(`/playlist/${id}`, {\r\n        // SPECIFY THE PAYLOAD\r\n        playlist: playlist\r\n    })\r\n}\r\n\r\nconst apis = {\r\n    createPlaylist,\r\n    deletePlaylistById,\r\n    getPlaylistById,\r\n    getPlaylistPairs,\r\n    getPlaylists,\r\n    updatePlaylistById\r\n}\r\n\r\nexport default apis\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzBA,KAAK,CAACC,QAAQ,CAACC,eAAe,GAAG,IAAI;AACrC,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,WAAW,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,KAAK;EAC/H,OAAOZ,GAAG,CAACa,IAAI,CAAE,YAAW,EAAE;IAC1B;IACAC,IAAI,EAAEV,WAAW;IACjBW,KAAK,EAAEV,QAAQ;IACfW,UAAU,EAAEV,SAAS;IACrBW,aAAa,EAAEV,QAAQ;IACvBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO;IAChBC,MAAM,EAAEA,MAAM;IACdC,SAAS,EAAEA,SAAS;IACpBC,QAAQ,EAAEA;EACd,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMM,kBAAkB,GAAIC,EAAE,IAAKnB,GAAG,CAACoB,MAAM,CAAE,aAAYD,EAAG,EAAC,CAAC;AACvE,OAAO,MAAME,eAAe,GAAIF,EAAE,IAAKnB,GAAG,CAACsB,GAAG,CAAE,aAAYH,EAAG,EAAC,CAAC;AACjE,OAAO,MAAMI,gBAAgB,GAAG,MAAMvB,GAAG,CAACsB,GAAG,CAAE,iBAAgB,CAAC;AAChE,OAAO,MAAME,YAAY,GAAG,MAAMxB,GAAG,CAACsB,GAAG,CAAE,aAAY,CAAC;AACxD,OAAO,MAAMG,kBAAkB,GAAG,CAACN,EAAE,EAAEO,QAAQ,KAAK;EAChD,OAAO1B,GAAG,CAAC2B,GAAG,CAAE,aAAYR,EAAG,EAAC,EAAE;IAC9B;IACAO,QAAQ,EAAEA;EACd,CAAC,CAAC;AACN,CAAC;AAED,MAAME,IAAI,GAAG;EACTzB,cAAc;EACde,kBAAkB;EAClBG,eAAe;EACfE,gBAAgB;EAChBC,YAAY;EACZC;AACJ,CAAC;AAED,eAAeG,IAAI"},"metadata":{},"sourceType":"module"}