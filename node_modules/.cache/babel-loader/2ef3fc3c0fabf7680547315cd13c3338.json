{"ast":null,"code":"import _classCallCheck from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */export var jsTPS_Transaction=/*#__PURE__*/function(){function jsTPS_Transaction(){_classCallCheck(this,jsTPS_Transaction);}_createClass(jsTPS_Transaction,[{key:\"doTransaction\",value:/**\r\n     * This method is called by jTPS when a transaction is executed.\r\n     */function doTransaction(){console.log(\"doTransaction - MISSING IMPLEMENTATION\");}/**\r\n     * This method is called by jTPS when a transaction is undone.\r\n     */},{key:\"undoTransaction\",value:function undoTransaction(){console.log(\"undoTransaction - MISSING IMPLEMENTATION\");}}]);return jsTPS_Transaction;}();/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */var jsTPS=/*#__PURE__*/function(){function jsTPS(){_classCallCheck(this,jsTPS);// THE TRANSACTION STACK\nthis.transactions=[];// THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n// INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\nthis.numTransactions=0;// THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n// THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n// IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n// AND STILL COULD BE REDONE.\nthis.mostRecentTransaction=-1;// THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n// TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n// MANAGE CONCURRENT UPDATES\nthis.performingDo=false;this.performingUndo=false;}/**\r\n     * isPerformingDo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of a do/redo operation.\r\n     */_createClass(jsTPS,[{key:\"isPerformingDo\",value:function isPerformingDo(){return this.performingDo;}/**\r\n     * isPerformingUndo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of an undo operation.\r\n     */},{key:\"isPerformingUndo\",value:function isPerformingUndo(){return this.performingUndo;}/**\r\n     * getSize\r\n     * \r\n     * Accessor method for getting the number of transactions on the stack.\r\n     */},{key:\"getSize\",value:function getSize(){return this.transactions.length;}/**\r\n     * getRedoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possibly be redone.\r\n     */},{key:\"getRedoSize\",value:function getRedoSize(){return this.getSize()-this.mostRecentTransaction-1;}/**\r\n     * getUndoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possible be undone.\r\n     */},{key:\"getUndoSize\",value:function getUndoSize(){return this.mostRecentTransaction+1;}/**\r\n     * hasTransactionToRedo\r\n     * \r\n     * Method for getting a boolean representing whether or not\r\n     * there are transactions on the stack that can be redone.\r\n     */},{key:\"hasTransactionToRedo\",value:function hasTransactionToRedo(){return this.mostRecentTransaction+1<this.numTransactions;}/**\r\n     * hasTransactionToUndo\r\n     * \r\n     * Method for getting a boolean representing whehter or not\r\n     * there are transactions on the stack that can be undone.\r\n     */},{key:\"hasTransactionToUndo\",value:function hasTransactionToUndo(){return this.mostRecentTransaction>=0;}/**\r\n     * addTransaction\r\n     * \r\n     * Method for adding a transaction to the TPS stack, note it\r\n     * also then does the transaction.\r\n     * \r\n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n     */},{key:\"addTransaction\",value:function addTransaction(transaction){// ARE WE BRANCHING?\nif(this.mostRecentTransaction<0||this.mostRecentTransaction<this.transactions.length-1){for(var i=this.transactions.length-1;i>this.mostRecentTransaction;i--){this.transactions.splice(i,1);}this.numTransactions=this.mostRecentTransaction+2;}else{this.numTransactions++;}// ADD THE TRANSACTION\nthis.transactions[this.mostRecentTransaction+1]=transaction;// AND EXECUTE IT\nthis.doTransaction();}/**\r\n     * doTransaction\r\n     * \r\n     * Does the current transaction on the stack and advances the transaction\r\n     * counter. Note this function may be invoked as a result of either adding\r\n     * a transaction (which also does it), or redoing a transaction.\r\n     */},{key:\"doTransaction\",value:function doTransaction(){if(this.hasTransactionToRedo()){this.performingDo=true;var transaction=this.transactions[this.mostRecentTransaction+1];transaction.doTransaction();this.mostRecentTransaction++;this.performingDo=false;}}/**\r\n     * This function gets the most recently executed transaction on the \r\n     * TPS stack and undoes it, moving the TPS counter accordingly.\r\n     */},{key:\"undoTransaction\",value:function undoTransaction(){if(this.hasTransactionToUndo()){this.performingUndo=true;var transaction=this.transactions[this.mostRecentTransaction];transaction.undoTransaction();this.mostRecentTransaction--;this.performingUndo=false;}}/**\r\n     * clearAllTransactions\r\n     * \r\n     * Removes all the transactions from the TPS, leaving it with none.\r\n     */},{key:\"clearAllTransactions\",value:function clearAllTransactions(){// REMOVE ALL THE TRANSACTIONS\nthis.transactions=[];// MAKE SURE TO RESET THE LOCATION OF THE\n// TOP OF THE TPS STACK TOO\nthis.mostRecentTransaction=-1;this.numTransactions=0;}/**\r\n     * toString\r\n     * \r\n     * Builds and returns a textual represention of the full TPS and its stack.\r\n     */},{key:\"toString\",value:function toString(){var text=\"--Number of Transactions: \"+this.numTransactions+\"\\n\";text+=\"--Current Index on Stack: \"+this.mostRecentTransaction+\"\\n\";text+=\"--Current Transaction Stack:\\n\";for(var i=0;i<=this.mostRecentTransaction;i++){var jT=this.transactions[i];text+=\"----\"+jT.toString()+\"\\n\";}return text;}}]);return jsTPS;}();export{jsTPS as default};","map":{"version":3,"names":["jsTPS_Transaction","console","log","jsTPS","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","length","getSize","transaction","i","splice","doTransaction","hasTransactionToRedo","hasTransactionToUndo","undoTransaction","text","jT","toString"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/common/jsTPS.js"],"sourcesContent":["/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */\r\nexport class jsTPS_Transaction {\r\n    /**\r\n     * This method is called by jTPS when a transaction is executed.\r\n     */\r\n    doTransaction() {\r\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n    \r\n    /**\r\n     * This method is called by jTPS when a transaction is undone.\r\n     */\r\n    undoTransaction() {\r\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n}\r\n\r\n/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */\r\nexport default class jsTPS {\r\n    constructor() {\r\n        // THE TRANSACTION STACK\r\n        this.transactions = [];\r\n\r\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\r\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\r\n        this.numTransactions = 0;\r\n\r\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\r\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\r\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\r\n        // AND STILL COULD BE REDONE.\r\n        this.mostRecentTransaction = -1;\r\n\r\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\r\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\r\n        // MANAGE CONCURRENT UPDATES\r\n        this.performingDo = false;\r\n        this.performingUndo = false;\r\n    }\r\n\r\n    /**\r\n     * isPerformingDo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of a do/redo operation.\r\n     */\r\n    isPerformingDo() {\r\n        return this.performingDo;\r\n    }\r\n\r\n    /**\r\n     * isPerformingUndo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of an undo operation.\r\n     */\r\n    isPerformingUndo() {\r\n        return this.performingUndo;\r\n    }\r\n\r\n    /**\r\n     * getSize\r\n     * \r\n     * Accessor method for getting the number of transactions on the stack.\r\n     */\r\n    getSize() {\r\n        return this.transactions.length;\r\n    }\r\n\r\n    /**\r\n     * getRedoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possibly be redone.\r\n     */\r\n    getRedoSize() {\r\n        return this.getSize() - this.mostRecentTransaction - 1;\r\n    }\r\n\r\n    /**\r\n     * getUndoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possible be undone.\r\n     */\r\n    getUndoSize() {\r\n        return this.mostRecentTransaction + 1;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToRedo\r\n     * \r\n     * Method for getting a boolean representing whether or not\r\n     * there are transactions on the stack that can be redone.\r\n     */\r\n    hasTransactionToRedo() {\r\n        return (this.mostRecentTransaction+1) < this.numTransactions;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToUndo\r\n     * \r\n     * Method for getting a boolean representing whehter or not\r\n     * there are transactions on the stack that can be undone.\r\n     */\r\n    hasTransactionToUndo() {\r\n        return this.mostRecentTransaction >= 0;\r\n    }\r\n\r\n    /**\r\n     * addTransaction\r\n     * \r\n     * Method for adding a transaction to the TPS stack, note it\r\n     * also then does the transaction.\r\n     * \r\n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n     */\r\n    addTransaction(transaction) {\r\n        // ARE WE BRANCHING?\r\n        if ((this.mostRecentTransaction < 0) \r\n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\r\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\r\n                    this.transactions.splice(i, 1);\r\n                }\r\n                this.numTransactions = this.mostRecentTransaction + 2;\r\n        }\r\n        else {\r\n            this.numTransactions++;\r\n        }\r\n\r\n        // ADD THE TRANSACTION\r\n        this.transactions[this.mostRecentTransaction+1] = transaction;\r\n\r\n        // AND EXECUTE IT\r\n        this.doTransaction();\r\n    }\r\n\r\n    /**\r\n     * doTransaction\r\n     * \r\n     * Does the current transaction on the stack and advances the transaction\r\n     * counter. Note this function may be invoked as a result of either adding\r\n     * a transaction (which also does it), or redoing a transaction.\r\n     */\r\n    doTransaction() {\r\n        if (this.hasTransactionToRedo()) {\r\n            this.performingDo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction+1];\r\n            transaction.doTransaction();\r\n            this.mostRecentTransaction++;\r\n            this.performingDo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function gets the most recently executed transaction on the \r\n     * TPS stack and undoes it, moving the TPS counter accordingly.\r\n     */\r\n    undoTransaction() {\r\n        if (this.hasTransactionToUndo()) {\r\n            this.performingUndo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction];\r\n            transaction.undoTransaction();\r\n            this.mostRecentTransaction--;\r\n            this.performingUndo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clearAllTransactions\r\n     * \r\n     * Removes all the transactions from the TPS, leaving it with none.\r\n     */\r\n    clearAllTransactions() {\r\n        // REMOVE ALL THE TRANSACTIONS\r\n        this.transactions = [];\r\n        \r\n        // MAKE SURE TO RESET THE LOCATION OF THE\r\n        // TOP OF THE TPS STACK TOO\r\n        this.mostRecentTransaction = -1;      \r\n        this.numTransactions = 0; \r\n    }\r\n\r\n    /**\r\n     * toString\r\n     * \r\n     * Builds and returns a textual represention of the full TPS and its stack.\r\n     */\r\n    toString() {        \r\n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\r\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\r\n        text += \"--Current Transaction Stack:\\n\";\r\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\r\n            let jT = this.transactions[i];\r\n            text += \"----\" + jT.toString() + \"\\n\";\r\n        }\r\n        return text;        \r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}