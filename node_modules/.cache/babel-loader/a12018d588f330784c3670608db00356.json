{"ast":null,"code":"/*\r\n    This is our http api for all things auth, which we use to \r\n    send authorization requests to our back-end API. Note we`re \r\n    using the Axios library for doing this, which is an easy to \r\n    use AJAX-based library. We could (and maybe should) use Fetch, \r\n    which is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/import axios from'axios';axios.defaults.withCredentials=true;var api=axios.create({baseURL:'https://playlister-project.herokuapp.com/auth'});// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /register). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport var getLoggedIn=function getLoggedIn(){return api.get(\"/loggedIn/\");};export var loginUser=function loginUser(email,password){return api.post(\"/login/\",{email:email,password:password});};export var logoutUser=function logoutUser(){return api.get(\"/logout/\");};export var registerUser=function registerUser(username,email,firstName,lastName,password,passwordVerify){return api.post(\"/register/\",{username:username,email:email,firstName:firstName,lastName:lastName,password:password,passwordVerify:passwordVerify});};var apis={getLoggedIn:getLoggedIn,registerUser:registerUser,loginUser:loginUser,logoutUser:logoutUser};export default apis;","map":{"version":3,"names":["axios","defaults","withCredentials","api","create","baseURL","getLoggedIn","get","loginUser","email","password","post","logoutUser","registerUser","username","firstName","lastName","passwordVerify","apis"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/auth/auth-request-api/index.js"],"sourcesContent":["/*\r\n    This is our http api for all things auth, which we use to \r\n    send authorization requests to our back-end API. Note we`re \r\n    using the Axios library for doing this, which is an easy to \r\n    use AJAX-based library. We could (and maybe should) use Fetch, \r\n    which is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\nimport axios from 'axios'\r\naxios.defaults.withCredentials = true;\r\nconst api = axios.create({\r\n    baseURL: 'https://playlister-project.herokuapp.com/auth',\r\n})\r\n\r\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\r\n// REQUEST METHOD (like get) AND PATH (like /register). SOME ALSO\r\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\r\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\r\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\r\n// CUSTOM FILTERS FOR QUERIES\r\n\r\nexport const getLoggedIn = () => api.get(`/loggedIn/`);\r\nexport const loginUser = (email, password) => {\r\n    return api.post(`/login/`, {\r\n        email : email,\r\n        password : password\r\n    })\r\n}\r\nexport const logoutUser = () => api.get(`/logout/`)\r\nexport const registerUser = (username, email, firstName, lastName, password, passwordVerify) => {\r\n    return api.post(`/register/`, {\r\n        username: username,\r\n        email: email,\r\n        firstName : firstName,\r\n        lastName : lastName,\r\n        password : password,\r\n        passwordVerify : passwordVerify\r\n    })\r\n}\r\nconst apis = {\r\n    getLoggedIn,\r\n    registerUser,\r\n    loginUser,\r\n    logoutUser\r\n}\r\n\r\nexport default apis\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,MAAOA,MAAK,KAAM,OAAO,CACzBA,KAAK,CAACC,QAAQ,CAACC,eAAe,CAAG,IAAI,CACrC,GAAMC,IAAG,CAAGH,KAAK,CAACI,MAAM,CAAC,CACrBC,OAAO,CAAE,+CACb,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAW,SAASH,IAAG,CAACI,GAAG,cAAc,GACtD,MAAO,IAAMC,UAAS,CAAG,QAAZA,UAAS,CAAIC,KAAK,CAAEC,QAAQ,CAAK,CAC1C,MAAOP,IAAG,CAACQ,IAAI,WAAY,CACvBF,KAAK,CAAGA,KAAK,CACbC,QAAQ,CAAGA,QACf,CAAC,CAAC,CACN,CAAC,CACD,MAAO,IAAME,WAAU,CAAG,QAAbA,WAAU,SAAST,IAAG,CAACI,GAAG,YAAY,GACnD,MAAO,IAAMM,aAAY,CAAG,QAAfA,aAAY,CAAIC,QAAQ,CAAEL,KAAK,CAAEM,SAAS,CAAEC,QAAQ,CAAEN,QAAQ,CAAEO,cAAc,CAAK,CAC5F,MAAOd,IAAG,CAACQ,IAAI,cAAe,CAC1BG,QAAQ,CAAEA,QAAQ,CAClBL,KAAK,CAAEA,KAAK,CACZM,SAAS,CAAGA,SAAS,CACrBC,QAAQ,CAAGA,QAAQ,CACnBN,QAAQ,CAAGA,QAAQ,CACnBO,cAAc,CAAGA,cACrB,CAAC,CAAC,CACN,CAAC,CACD,GAAMC,KAAI,CAAG,CACTZ,WAAW,CAAXA,WAAW,CACXO,YAAY,CAAZA,YAAY,CACZL,SAAS,CAATA,SAAS,CACTI,UAAU,CAAVA,UACJ,CAAC,CAED,cAAeM,KAAI"},"metadata":{},"sourceType":"module"}