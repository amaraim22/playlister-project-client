{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/keoam/Documents/Github/playlister-project-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useContext,useState}from'react';import{useHistory}from'react-router-dom';import jsTPS from'../common/jsTPS';import api from'./store-request-api';import CreateSong_Transaction from'../transactions/CreateSong_Transaction';import MoveSong_Transaction from'../transactions/MoveSong_Transaction';import RemoveSong_Transaction from'../transactions/RemoveSong_Transaction';import UpdateSong_Transaction from'../transactions/UpdateSong_Transaction';import AuthContext from'../auth';/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/ // THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var GlobalStoreContext=/*#__PURE__*/createContext({});console.log(\"create GlobalStoreContext\");// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport var GlobalStoreActionType={CHANGE_LIST_NAME:\"CHANGE_LIST_NAME\",CLOSE_CURRENT_LIST:\"CLOSE_CURRENT_LIST\",CREATE_NEW_LIST:\"CREATE_NEW_LIST\",LOAD_ID_NAME_PAIRS:\"LOAD_ID_NAME_PAIRS\",MARK_LIST_FOR_DELETION:\"MARK_LIST_FOR_DELETION\",UNMARK_LIST_FOR_DELETION:\"UNMARK_LIST_FOR_DELETION\",SET_CURRENT_LIST:\"SET_CURRENT_LIST\",SET_LIST_NAME_EDIT_ACTIVE:\"SET_LIST_NAME_EDIT_ACTIVE\",EDIT_SONG:\"EDIT_SONG\",REMOVE_SONG:\"REMOVE_SONG\",HIDE_MODALS:\"HIDE_MODALS\",SET_PAGE_VIEW:\"SET_PAGE_VIEW\",GET_ALL_PLAYLISTS:\"GET_ALL_PLAYLISTS\",SORT_PLAYLISTS:\"SORT_PLAYLISTS\",CHANGE_FILTER:\"CHANGE_FILTER\"};// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nvar tps=new jsTPS();var CurrentModal={NONE:\"NONE\",DELETE_LIST:\"DELETE_LIST\",EDIT_SONG:\"EDIT_SONG\",REMOVE_SONG:\"REMOVE_SONG\"};// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props){// THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\nvar _useState=useState({currentModal:CurrentModal.NONE,pageView:\"HOME\",idNamePairs:[],currentList:null,currentSongIndex:-1,currentSong:null,newListCounter:0,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,allPlaylists:null,filter:\"\"}),_useState2=_slicedToArray(_useState,2),store=_useState2[0],setStore=_useState2[1];var history=useHistory();console.log(\"inside useGlobalStore\");// SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\nvar _useContext=useContext(AuthContext),auth=_useContext.auth;console.log(\"auth: \"+auth);// HERE'S THE DATA STORE'S REDUCER, IT MUST\n// HANDLE EVERY TYPE OF STATE CHANGE\nvar storeReducer=function storeReducer(action){var type=action.type,payload=action.payload;switch(type){// LIST UPDATE OF ITS NAME\ncase GlobalStoreActionType.CHANGE_LIST_NAME:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,idNamePairs:payload.idNamePairs,currentList:payload.playlist,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,filter:\"\"});});}// STOP EDITING THE CURRENT LIST\ncase GlobalStoreActionType.CLOSE_CURRENT_LIST:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentList:null,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}// CREATE A NEW LIST\ncase GlobalStoreActionType.CREATE_NEW_LIST:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentList:payload,currentSongIndex:-1,currentSong:null,newListCounter:store.newListCounter+1,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,filter:\"\"});});}// GET ALL THE LISTS SO WE CAN PRESENT THEM\ncase GlobalStoreActionType.LOAD_ID_NAME_PAIRS:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,idNamePairs:payload.pairsArray,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}// PREPARE TO DELETE A LIST\ncase GlobalStoreActionType.MARK_LIST_FOR_DELETION:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.DELETE_LIST,currentList:store.currentList,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:payload.id,listMarkedForDeletion:payload.playlist});});}case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:null,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,allPlaylists:store.allPlaylists});});}// UPDATE A LIST\ncase GlobalStoreActionType.SET_CURRENT_LIST:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentList:payload,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}// START EDITING A LIST NAME\ncase GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentList:payload,currentSongIndex:-1,currentSong:null,listNameActive:true,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}// \ncase GlobalStoreActionType.EDIT_SONG:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.EDIT_SONG,currentSongIndex:payload.currentSongIndex,currentSong:payload.currentSong,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}case GlobalStoreActionType.REMOVE_SONG:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.REMOVE_SONG,currentSongIndex:payload.currentSongIndex,currentSong:payload.currentSong,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}case GlobalStoreActionType.HIDE_MODALS:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null});});}case GlobalStoreActionType.SET_PAGE_VIEW:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{pageView:payload,currentList:null,filter:\"\"});});}case GlobalStoreActionType.GET_ALL_PLAYLISTS:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{allPlaylists:payload});});}// GET ALL THE LISTS SO WE CAN PRESENT THEM\ncase GlobalStoreActionType.SORT_PLAYLISTS:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentList:null,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,allPlaylists:payload.allPlaylists,idNamePairs:payload.pairsArray,pageView:payload.pageView});});}// GET ALL THE LISTS SO WE CAN PRESENT THEM\ncase GlobalStoreActionType.CHANGE_FILTER:{return setStore(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{currentModal:CurrentModal.NONE,currentList:null,currentSongIndex:-1,currentSong:null,listNameActive:false,listIdMarkedForDeletion:null,listMarkedForDeletion:null,pageView:payload.pageView,filter:payload.string});});}default:return store;}};// THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n// DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n// RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n// THIS FUNCTION PROCESSES CHANGING A LIST NAME\nstore.changeListName=function(id,newName){// GET THE LIST\nfunction asyncChangeListName(_x){return _asyncChangeListName.apply(this,arguments);}function _asyncChangeListName(){_asyncChangeListName=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id){var response,updateList,playlist;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return api.getPlaylistById(id);case 2:response=_context3.sent;if(response.data.success){updateList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(playlist){var getListPairs;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return api.updatePlaylistById(playlist._id,playlist);case 2:response=_context2.sent;if(response.data.success){getListPairs=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(playlist){var pairsArray;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return api.getPlaylistPairs();case 2:response=_context.sent;if(response.data.success){pairsArray=response.data.idNamePairs;storeReducer({type:GlobalStoreActionType.CHANGE_LIST_NAME,payload:{idNamePairs:pairsArray,playlist:playlist}});history.push(\"/\");}case 4:case\"end\":return _context.stop();}}},_callee);}));return function getListPairs(_x3){return _ref2.apply(this,arguments);};}();getListPairs(playlist);}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function updateList(_x2){return _ref.apply(this,arguments);};}();playlist=response.data.playlist;playlist.name=newName;updateList(playlist);}case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _asyncChangeListName.apply(this,arguments);}asyncChangeListName(id);};// THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\nstore.closeCurrentList=function(){storeReducer({type:GlobalStoreActionType.CLOSE_CURRENT_LIST,payload:{}});tps.clearAllTransactions();history.push(\"/\");};// THIS FUNCTION CREATES A NEW LIST\nstore.createNewList=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){var asyncCreateNewList,_asyncCreateNewList;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_asyncCreateNewList=function _asyncCreateNewList3(){_asyncCreateNewList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(){var newListName,response,newList;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:newListName=\"Untitled\"+store.newListCounter;_context4.next=3;return api.createPlaylist(newListName,[],auth.user.email,auth.user.username,null,0,[],[],[]);case 3:response=_context4.sent;console.log(\"createNewList response: \"+response);if(response.status===201){tps.clearAllTransactions();newList=response.data.playlist;storeReducer({type:GlobalStoreActionType.CREATE_NEW_LIST,payload:newList});// IF IT'S A VALID LIST THEN LET'S START EDITING IT\nstore.loadIdNamePairs();history.push(\"/\");}else{console.log(\"API FAILED TO CREATE A NEW LIST\");}case 6:case\"end\":return _context4.stop();}}},_callee4);}));return _asyncCreateNewList.apply(this,arguments);};asyncCreateNewList=function _asyncCreateNewList2(){return _asyncCreateNewList.apply(this,arguments);};asyncCreateNewList();case 3:case\"end\":return _context5.stop();}}},_callee5);}));// THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\nstore.loadIdNamePairs=function(){function asyncLoadIdNamePairs(){return _asyncLoadIdNamePairs.apply(this,arguments);}function _asyncLoadIdNamePairs(){_asyncLoadIdNamePairs=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var response,pairsArray;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return api.getPlaylistPairs();case 2:response=_context6.sent;if(response.data.success){pairsArray=response.data.idNamePairs;if(response.data.success){storeReducer({type:GlobalStoreActionType.LOAD_ID_NAME_PAIRS,payload:{pairsArray:pairsArray}});}}else{console.log(\"API FAILED TO GET THE LIST PAIRS\");}case 4:case\"end\":return _context6.stop();}}},_callee6);}));return _asyncLoadIdNamePairs.apply(this,arguments);}asyncLoadIdNamePairs();};store.getAllPlaylists=function(){function asyncGetAllPlaylists(){return _asyncGetAllPlaylists.apply(this,arguments);}function _asyncGetAllPlaylists(){_asyncGetAllPlaylists=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(){var response,allLists;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return api.getPlaylists();case 2:response=_context7.sent;if(response.data.success){allLists=response.data.playlists;storeReducer({type:GlobalStoreActionType.GET_ALL_PLAYLISTS,payload:allLists});}else{console.log(\"API FAILED TO GET THE LIST PAIRS\");}case 4:case\"end\":return _context7.stop();}}},_callee7);}));return _asyncGetAllPlaylists.apply(this,arguments);}asyncGetAllPlaylists();};// THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n// OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n// FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n// showDeleteListModal, and hideDeleteListModal\nstore.markListForDeletion=function(id){function getListToDelete(_x4){return _getListToDelete.apply(this,arguments);}function _getListToDelete(){_getListToDelete=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(id){var response,playlist;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return api.getPlaylistById(id);case 2:response=_context8.sent;if(response.data.success){playlist=response.data.playlist;storeReducer({type:GlobalStoreActionType.MARK_LIST_FOR_DELETION,payload:{id:id,playlist:playlist}});}case 4:case\"end\":return _context8.stop();}}},_callee8);}));return _getListToDelete.apply(this,arguments);}getListToDelete(id);};store.deleteList=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(id){var processDelete,_processDelete;return _regeneratorRuntime().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_processDelete=function _processDelete3(){_processDelete=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(id){var response;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return api.deletePlaylistById(id);case 2:response=_context9.sent;if(response.data.success){store.loadIdNamePairs();history.push(\"/\");}case 4:case\"end\":return _context9.stop();}}},_callee9);}));return _processDelete.apply(this,arguments);};processDelete=function _processDelete2(_x6){return _processDelete.apply(this,arguments);};_context10.next=4;return processDelete(id);case 4:case\"end\":return _context10.stop();}}},_callee10);}));return function(_x5){return _ref4.apply(this,arguments);};}();store.deleteMarkedList=function(){store.deleteList(store.listIdMarkedForDeletion);store.hideModals();};store.unmarkListForDeletion=function(){storeReducer({type:GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,payload:null});};// THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n// TO SEE IF THEY REALLY WANT TO DELETE THE LIST\nstore.showEditSongModal=function(songIndex,songToEdit){storeReducer({type:GlobalStoreActionType.EDIT_SONG,payload:{currentSongIndex:songIndex,currentSong:songToEdit}});};store.showRemoveSongModal=function(songIndex,songToRemove){storeReducer({type:GlobalStoreActionType.REMOVE_SONG,payload:{currentSongIndex:songIndex,currentSong:songToRemove}});};store.hideModals=function(){storeReducer({type:GlobalStoreActionType.HIDE_MODALS,payload:{}});};store.isDeleteListModalOpen=function(){return store.currentModal===CurrentModal.DELETE_LIST;};store.isEditSongModalOpen=function(){return store.currentModal===CurrentModal.EDIT_SONG;};store.isRemoveSongModalOpen=function(){return store.currentModal===CurrentModal.REMOVE_SONG;};// THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n// OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n// FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n// moveItem, updateItem, updateCurrentList, undo, and redo\nstore.setCurrentList=function(id){function asyncSetCurrentList(_x7){return _asyncSetCurrentList.apply(this,arguments);}function _asyncSetCurrentList(){_asyncSetCurrentList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(id){var response,playlist;return _regeneratorRuntime().wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:_context11.next=2;return api.getPlaylistById(id);case 2:response=_context11.sent;if(response.data.success){playlist=response.data.playlist;storeReducer({type:GlobalStoreActionType.SET_CURRENT_LIST,payload:playlist});history.push(\"/\");}case 4:case\"end\":return _context11.stop();}}},_callee11);}));return _asyncSetCurrentList.apply(this,arguments);}asyncSetCurrentList(id);};store.publishPlaylist=function(list){list.publishedDate=new Date();function asyncPublishList(){return _asyncPublishList.apply(this,arguments);}function _asyncPublishList(){_asyncPublishList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(){var response;return _regeneratorRuntime().wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.next=2;return api.updatePlaylistById(list._id,list);case 2:response=_context12.sent;if(response.data.success){store.loadIdNamePairs();}case 4:case\"end\":return _context12.stop();}}},_callee12);}));return _asyncPublishList.apply(this,arguments);}asyncPublishList();};store.duplicatePlaylist=function(list){function asyncDuplicatePlaylist(){return _asyncDuplicatePlaylist.apply(this,arguments);}function _asyncDuplicatePlaylist(){_asyncDuplicatePlaylist=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(){var response,newList;return _regeneratorRuntime().wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.next=2;return api.createPlaylist(list.name+\" copy\",list.songs,auth.user.email,auth.user.username,null,0,[],[],[]);case 2:response=_context13.sent;console.log(\"createNewList response: \"+response);if(response.status===201){tps.clearAllTransactions();newList=response.data.playlist;storeReducer({type:GlobalStoreActionType.CREATE_NEW_LIST,payload:newList});// IF IT'S A VALID LIST THEN LET'S START EDITING IT\nstore.loadIdNamePairs();}case 5:case\"end\":return _context13.stop();}}},_callee13);}));return _asyncDuplicatePlaylist.apply(this,arguments);}asyncDuplicatePlaylist();};store.getPlaylistSize=function(){return store.currentList.songs.length;};store.addNewSong=function(){var index=this.getPlaylistSize();this.addCreateSongTransaction(index,\"Untitled\",\"?\",\"dQw4w9WgXcQ\");};// THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n// USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\nstore.createSong=function(index,song){var list=store.currentList;list.songs.splice(index,0,song);// NOW MAKE IT OFFICIAL\nstore.updateCurrentList(list);};// THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n// start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\nstore.moveSong=function(start,end){var list=store.currentList;// WE NEED TO UPDATE THE STATE FOR THE APP\nif(start<end){var temp=list.songs[start];for(var i=start;i<end;i++){list.songs[i]=list.songs[i+1];}list.songs[end]=temp;}else if(start>end){var _temp=list.songs[start];for(var _i=start;_i>end;_i--){list.songs[_i]=list.songs[_i-1];}list.songs[end]=_temp;}// NOW MAKE IT OFFICIAL\nstore.updateCurrentList(list);};// THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n// FROM THE CURRENT LIST\nstore.removeSong=function(index){var list=store.currentList;list.songs.splice(index,1);// NOW MAKE IT OFFICIAL\nstore.updateCurrentList(list);};// THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\nstore.updateSong=function(index,songData){var list=store.currentList;var song=list.songs[index];song.title=songData.title;song.artist=songData.artist;song.youTubeId=songData.youTubeId;// NOW MAKE IT OFFICIAL\nstore.updateCurrentList(list);};store.addNewSong=function(){var playlistSize=store.getPlaylistSize();store.addCreateSongTransaction(playlistSize,\"Untitled\",\"?\",\"dQw4w9WgXcQ\");};// THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\nstore.addCreateSongTransaction=function(index,title,artist,youTubeId){// ADD A SONG ITEM AND ITS NUMBER\nvar song={title:title,artist:artist,youTubeId:youTubeId};var transaction=new CreateSong_Transaction(store,index,song);tps.addTransaction(transaction);};store.addMoveSongTransaction=function(start,end){var transaction=new MoveSong_Transaction(store,start,end);tps.addTransaction(transaction);};// THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\nstore.addRemoveSongTransaction=function(){var index=store.currentSongIndex;var song=store.currentList.songs[index];var transaction=new RemoveSong_Transaction(store,index,song);tps.addTransaction(transaction);};store.addUpdateSongTransaction=function(index,newSongData){var song=store.currentList.songs[index];var oldSongData={title:song.title,artist:song.artist,youTubeId:song.youTubeId};var transaction=new UpdateSong_Transaction(this,index,oldSongData,newSongData);tps.addTransaction(transaction);};store.updateCurrentList=function(list){function asyncUpdateCurrentList(_x8){return _asyncUpdateCurrentList.apply(this,arguments);}function _asyncUpdateCurrentList(){_asyncUpdateCurrentList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(list){var response,playlist;return _regeneratorRuntime().wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:_context14.next=2;return api.updatePlaylistById(list._id,list);case 2:response=_context14.sent;if(response.data.success){playlist=response.data.playlist;storeReducer({type:GlobalStoreActionType.SET_CURRENT_LIST,payload:playlist});store.loadIdNamePairs();store.getAllPlaylists();history.push(\"/\");}case 4:case\"end\":return _context14.stop();}}},_callee14);}));return _asyncUpdateCurrentList.apply(this,arguments);}asyncUpdateCurrentList(list);};store.undo=function(){tps.undoTransaction();};store.redo=function(){tps.doTransaction();};store.canAddNewSong=function(){return store.currentList!==null;};store.canUndo=function(){return store.currentList!==null&&tps.hasTransactionToUndo();};store.canRedo=function(){return store.currentList!==null&&tps.hasTransactionToRedo();};store.canClose=function(){return store.currentList!==null;};// THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\nstore.setIsListNameEditActive=function(){storeReducer({type:GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,payload:null});};store.addComment=function(list,newCommentBody){console.log(newCommentBody);var newComment={body:newCommentBody,owner:auth.user.username,postedDate:new Date()};list.comments.push(newComment);//list.comments = [];\nconsole.log(list);store.updateCurrentList(list);};store.incrementListens=function(id){function asyncIncrementListens(_x9){return _asyncIncrementListens.apply(this,arguments);}function _asyncIncrementListens(){_asyncIncrementListens=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(id){var response,playlist;return _regeneratorRuntime().wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:_context15.next=2;return api.getPlaylistById(id);case 2:response=_context15.sent;if(response.data.success){playlist=response.data.playlist;if(playlist.publishedDate!=null){playlist.listens+=1;store.updateCurrentList(playlist);}}case 4:case\"end\":return _context15.stop();}}},_callee15);}));return _asyncIncrementListens.apply(this,arguments);}asyncIncrementListens(id);};store.changePageView=function(pageType){storeReducer({type:GlobalStoreActionType.SET_PAGE_VIEW,payload:pageType});};store.changeFilter=function(keyWord,pageView){storeReducer({type:GlobalStoreActionType.CHANGE_FILTER,payload:{pageView:pageView,string:keyWord}});};store.sortPlaylists=function(propType,pageView){if(pageView===\"HOME\"){var pairsArray=store.idNamePairs;if(propType===\"Sort Name\"){pairsArray.sort(function(a,b){return a.name.localeCompare(b.name,undefined,{sensitivity:'base'});});}else if(propType===\"Sort Creation Date\"){pairsArray.sort(function(a,b){return new Date(a.playlist.createdAt)-new Date(b.playlist.createdAt);});}else if(propType===\"Sort Last Edit Date\"){pairsArray.sort(function(a,b){return new Date(b.playlist.updatedAt)-new Date(a.playlist.updatedAt);});}storeReducer({type:GlobalStoreActionType.SORT_PLAYLISTS,payload:{pairsArray:pairsArray,pageView:pageView,allPlaylists:store.allPlaylists}});}else if(pageView===\"ALL\"||pageView===\"USER\"){var allLists=store.allPlaylists;if(propType===\"Sort Name\"){allLists.sort(function(a,b){return a.name.localeCompare(b.name,undefined,{sensitivity:'base'});});}else if(propType===\"Sort Publish Date\"){allLists.sort(function(a,b){return new Date(b.playlist.publishedDate)-new Date(a.playlist.publishedDate);});}else if(propType===\"Sort Listens\"){allLists.sort(function(a,b){return b.playlist.listens-a.playlist.listens;});}else if(propType===\"Sort Likes\"){allLists.sort(function(a,b){return b.playlist.likers.length-a.playlist.likers.length;});}else if(propType===\"Sort Dislikes\"){allLists.sort(function(a,b){return b.playlist.dislikers.length-a.playlist.dislikers.length;});}storeReducer({type:GlobalStoreActionType.SORT_PLAYLISTS,payload:{pairsArray:store.idNamePairs,pageView:pageView,allPlaylists:allLists}});}};return/*#__PURE__*/_jsx(GlobalStoreContext.Provider,{value:{store:store},children:props.children});}export default GlobalStoreContext;export{GlobalStoreContextProvider};","map":{"version":3,"names":["createContext","useContext","useState","useHistory","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","AuthContext","GlobalStoreContext","console","log","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SONG","REMOVE_SONG","HIDE_MODALS","SET_PAGE_VIEW","GET_ALL_PLAYLISTS","SORT_PLAYLISTS","CHANGE_FILTER","tps","CurrentModal","NONE","DELETE_LIST","GlobalStoreContextProvider","props","currentModal","pageView","idNamePairs","currentList","currentSongIndex","currentSong","newListCounter","listNameActive","listIdMarkedForDeletion","listMarkedForDeletion","allPlaylists","filter","store","setStore","history","auth","storeReducer","action","type","payload","prevState","playlist","pairsArray","id","string","changeListName","newName","asyncChangeListName","getPlaylistById","response","data","success","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","push","name","closeCurrentList","clearAllTransactions","createNewList","asyncCreateNewList","newListName","createPlaylist","user","email","username","status","newList","loadIdNamePairs","asyncLoadIdNamePairs","getAllPlaylists","asyncGetAllPlaylists","getPlaylists","allLists","playlists","markListForDeletion","getListToDelete","deleteList","processDelete","deletePlaylistById","deleteMarkedList","hideModals","unmarkListForDeletion","showEditSongModal","songIndex","songToEdit","showRemoveSongModal","songToRemove","isDeleteListModalOpen","isEditSongModalOpen","isRemoveSongModalOpen","setCurrentList","asyncSetCurrentList","publishPlaylist","list","publishedDate","Date","asyncPublishList","duplicatePlaylist","asyncDuplicatePlaylist","songs","getPlaylistSize","length","addNewSong","index","addCreateSongTransaction","createSong","song","splice","updateCurrentList","moveSong","start","end","temp","i","removeSong","updateSong","songData","title","artist","youTubeId","playlistSize","transaction","addTransaction","addMoveSongTransaction","addRemoveSongTransaction","addUpdateSongTransaction","newSongData","oldSongData","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","canAddNewSong","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","canClose","setIsListNameEditActive","addComment","newCommentBody","newComment","body","owner","postedDate","comments","incrementListens","asyncIncrementListens","listens","changePageView","pageType","changeFilter","keyWord","sortPlaylists","propType","sort","a","b","localeCompare","undefined","sensitivity","createdAt","updatedAt","likers","dislikers","children"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from './store-request-api'\r\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction'\r\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\r\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction'\r\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction'\r\nimport AuthContext from '../auth'\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\r\nexport const GlobalStoreContext = createContext({});\r\nconsole.log(\"create GlobalStoreContext\");\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    EDIT_SONG: \"EDIT_SONG\",\r\n    REMOVE_SONG: \"REMOVE_SONG\",\r\n    HIDE_MODALS: \"HIDE_MODALS\",\r\n    SET_PAGE_VIEW: \"SET_PAGE_VIEW\",\r\n    GET_ALL_PLAYLISTS: \"GET_ALL_PLAYLISTS\",\r\n    SORT_PLAYLISTS: \"SORT_PLAYLISTS\",\r\n    CHANGE_FILTER: \"CHANGE_FILTER\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\nconst CurrentModal = {\r\n    NONE : \"NONE\",\r\n    DELETE_LIST : \"DELETE_LIST\",\r\n    EDIT_SONG : \"EDIT_SONG\",\r\n    REMOVE_SONG : \"REMOVE_SONG\"\r\n}\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nfunction GlobalStoreContextProvider(props) {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        currentModal : CurrentModal.NONE,\r\n        pageView: \"HOME\",\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        currentSongIndex : -1,\r\n        currentSong : null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listIdMarkedForDeletion: null,\r\n        listMarkedForDeletion: null,\r\n        allPlaylists: null,\r\n        filter: \"\",\r\n    });\r\n    const history = useHistory();\r\n\r\n    console.log(\"inside useGlobalStore\");\r\n\r\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\r\n    const { auth } = useContext(AuthContext);\r\n    console.log(\"auth: \" + auth);\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {                \r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: payload,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    idNamePairs: payload.pairsArray,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.DELETE_LIST,\r\n                    currentList: store.currentList,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: payload.id,\r\n                    listMarkedForDeletion: payload.playlist,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    allPlaylists: store.allPlaylists,\r\n                }));\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentList: payload,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: payload,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: true,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // \r\n            case GlobalStoreActionType.EDIT_SONG: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.EDIT_SONG,\r\n                    currentSongIndex: payload.currentSongIndex,\r\n                    currentSong: payload.currentSong,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.REMOVE_SONG: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.REMOVE_SONG,\r\n                    currentSongIndex: payload.currentSongIndex,\r\n                    currentSong: payload.currentSong,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.HIDE_MODALS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.SET_PAGE_VIEW: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    pageView: payload,\r\n                    currentList: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.GET_ALL_PLAYLISTS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    allPlaylists: payload,\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.SORT_PLAYLISTS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    allPlaylists: payload.allPlaylists,\r\n                    idNamePairs: payload.pairsArray,\r\n                    pageView: payload.pageView,\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.CHANGE_FILTER: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    pageView: payload.pageView,\r\n                    filter: payload.string,\r\n                }));\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                                history.push(\"/\");\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n        tps.clearAllTransactions();\r\n\r\n        history.push(\"/\");\r\n    }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = async function () {\r\n        async function asyncCreateNewList() {\r\n            let newListName = \"Untitled\" + store.newListCounter;\r\n            const response = await api.createPlaylist(newListName, [], auth.user.email, auth.user.username, null, 0, [], [], []);\r\n            console.log(\"createNewList response: \" + response);\r\n            if (response.status === 201) {\r\n                tps.clearAllTransactions();\r\n                let newList = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: newList\r\n                }\r\n                );\r\n\r\n                // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n                store.loadIdNamePairs();\r\n                history.push(\"/\");\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            let response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                        payload: { pairsArray: pairsArray }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.getAllPlaylists = function () {\r\n        async function asyncGetAllPlaylists() {\r\n            let response = await api.getPlaylists();\r\n            if (response.data.success) {\r\n                let allLists = response.data.playlists;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.GET_ALL_PLAYLISTS,\r\n                    payload: allLists\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncGetAllPlaylists();\r\n    }\r\n\r\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = function (id) {\r\n        async function getListToDelete(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                    payload: {id: id, playlist: playlist}\r\n                });\r\n            }\r\n        }\r\n        getListToDelete(id);\r\n    }\r\n    store.deleteList = async function (id) {\r\n        async function processDelete(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        await processDelete(id);\r\n    }\r\n    store.deleteMarkedList = function() {\r\n        store.deleteList(store.listIdMarkedForDeletion);\r\n        store.hideModals();\r\n    }\r\n    store.unmarkListForDeletion = function() {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\r\n            payload: null\r\n        });\r\n    }\r\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\r\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\r\n\r\n    store.showEditSongModal = (songIndex, songToEdit) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.EDIT_SONG,\r\n            payload: {currentSongIndex: songIndex, currentSong: songToEdit}\r\n        });        \r\n    }\r\n    store.showRemoveSongModal = (songIndex, songToRemove) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.REMOVE_SONG,\r\n            payload: {currentSongIndex: songIndex, currentSong: songToRemove}\r\n        });        \r\n    }\r\n    store.hideModals = () => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.HIDE_MODALS,\r\n            payload: {}\r\n        });    \r\n    }\r\n    store.isDeleteListModalOpen = () => {\r\n        return store.currentModal === CurrentModal.DELETE_LIST;\r\n    }\r\n    store.isEditSongModalOpen = () => {\r\n        return store.currentModal === CurrentModal.EDIT_SONG;\r\n    }\r\n    store.isRemoveSongModalOpen = () => {\r\n        return store.currentModal === CurrentModal.REMOVE_SONG;\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: playlist\r\n                });\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n\r\n    store.publishPlaylist = function (list) {     \r\n        list.publishedDate = new Date();\r\n        async function asyncPublishList() {\r\n            const response = await api.updatePlaylistById(list._id, list);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n            }\r\n        }\r\n        asyncPublishList();\r\n    }\r\n\r\n    store.duplicatePlaylist = function (list) {\r\n        async function asyncDuplicatePlaylist() { \r\n            const response = await api.createPlaylist(list.name + \" copy\", list.songs, auth.user.email, auth.user.username, null, 0, [], [], []);\r\n            console.log(\"createNewList response: \" + response);\r\n            if (response.status === 201) {\r\n                tps.clearAllTransactions();\r\n                let newList = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: newList\r\n                }\r\n                );\r\n\r\n                // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n                store.loadIdNamePairs();\r\n            }\r\n        }\r\n        asyncDuplicatePlaylist();\r\n    }\r\n\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.addNewSong = function() {\r\n        let index = this.getPlaylistSize();\r\n        this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\r\n    }\r\n    // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\r\n    // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\r\n    store.createSong = function(index, song) {\r\n        let list = store.currentList;      \r\n        list.songs.splice(index, 0, song);\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\r\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\r\n    store.moveSong = function(start, end) {\r\n        let list = store.currentList;\r\n\r\n        // WE NEED TO UPDATE THE STATE FOR THE APP\r\n        if (start < end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i < end; i++) {\r\n                list.songs[i] = list.songs[i + 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i > end; i--) {\r\n                list.songs[i] = list.songs[i - 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\r\n    // FROM THE CURRENT LIST\r\n    store.removeSong = function(index) {\r\n        let list = store.currentList;      \r\n        list.songs.splice(index, 1); \r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\r\n    store.updateSong = function(index, songData) {\r\n        let list = store.currentList;\r\n        let song = list.songs[index];\r\n        song.title = songData.title;\r\n        song.artist = songData.artist;\r\n        song.youTubeId = songData.youTubeId;\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    store.addNewSong = () => {\r\n        let playlistSize = store.getPlaylistSize();\r\n        store.addCreateSongTransaction(\r\n            playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\r\n    }\r\n    // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\r\n    store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\r\n        // ADD A SONG ITEM AND ITS NUMBER\r\n        let song = {\r\n            title: title,\r\n            artist: artist,\r\n            youTubeId: youTubeId\r\n        };\r\n        let transaction = new CreateSong_Transaction(store, index, song);\r\n        tps.addTransaction(transaction);\r\n    }    \r\n    store.addMoveSongTransaction = function (start, end) {\r\n        let transaction = new MoveSong_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\r\n    store.addRemoveSongTransaction = () => {\r\n        let index = store.currentSongIndex;\r\n        let song = store.currentList.songs[index];\r\n        let transaction = new RemoveSong_Transaction(store, index, song);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.addUpdateSongTransaction = function (index, newSongData) {\r\n        let song = store.currentList.songs[index];\r\n        let oldSongData = {\r\n            title: song.title,\r\n            artist: song.artist,\r\n            youTubeId: song.youTubeId\r\n        };\r\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);        \r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.updateCurrentList = function(list) {\r\n        async function asyncUpdateCurrentList(list) {\r\n            const response = await api.updatePlaylistById(list._id, list);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: playlist\r\n                });\r\n                store.loadIdNamePairs();\r\n                store.getAllPlaylists();\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        asyncUpdateCurrentList(list);\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n    store.canAddNewSong = function() {\r\n        return (store.currentList !== null);\r\n    }\r\n    store.canUndo = function() {\r\n        return ((store.currentList !== null) && tps.hasTransactionToUndo());\r\n    }\r\n    store.canRedo = function() {\r\n        return ((store.currentList !== null) && tps.hasTransactionToRedo());\r\n    }\r\n    store.canClose = function() {\r\n        return (store.currentList !== null);\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n    store.addComment = function(list, newCommentBody) {\r\n        console.log(newCommentBody);\r\n        let newComment = { body: newCommentBody, owner: auth.user.username, postedDate: new Date() };\r\n        list.comments.push(newComment);\r\n        //list.comments = [];\r\n        console.log(list);\r\n        store.updateCurrentList(list);\r\n    }\r\n    store.incrementListens = function(id) {\r\n        async function asyncIncrementListens(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                if (playlist.publishedDate != null) {\r\n                    playlist.listens += 1;\r\n                    store.updateCurrentList(playlist);\r\n                }\r\n            }\r\n        }\r\n        asyncIncrementListens(id);\r\n    }\r\n    store.changePageView = function (pageType) {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_PAGE_VIEW,\r\n            payload: pageType\r\n        });\r\n    }\r\n    store.changeFilter = function (keyWord, pageView) {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CHANGE_FILTER,\r\n            payload: { pageView: pageView,\r\n                string: keyWord }\r\n        });\r\n    }\r\n    store.sortPlaylists = function (propType, pageView) {\r\n        if (pageView === \"HOME\") {\r\n            let pairsArray = store.idNamePairs;\r\n            if (propType === \"Sort Name\") {\r\n                pairsArray.sort((a,b)=> a.name.localeCompare(b.name, undefined, {sensitivity: 'base'}));  \r\n            }\r\n            else if (propType === \"Sort Creation Date\") {\r\n                pairsArray.sort(function(a,b){\r\n                    return new Date(a.playlist.createdAt) - new Date(b.playlist.createdAt);\r\n                });                \r\n            } \r\n            else if (propType === \"Sort Last Edit Date\") {\r\n                pairsArray.sort(function(a,b){\r\n                    return new Date(b.playlist.updatedAt) - new Date(a.playlist.updatedAt);\r\n                });\r\n            }\r\n\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SORT_PLAYLISTS,\r\n                payload: { pairsArray: pairsArray,\r\n                            pageView: pageView,\r\n                            allPlaylists: store.allPlaylists }\r\n            });\r\n        }\r\n        else if (pageView === \"ALL\" || pageView === \"USER\") {\r\n            let allLists = store.allPlaylists;\r\n            if (propType === \"Sort Name\") {\r\n                allLists.sort((a,b)=> a.name.localeCompare(b.name, undefined, {sensitivity: 'base'}));\r\n            }\r\n            else if (propType === \"Sort Publish Date\") {\r\n                allLists.sort(function(a,b){\r\n                    return new Date(b.playlist.publishedDate) - new Date(a.playlist.publishedDate);\r\n                });\r\n            }\r\n            else if (propType === \"Sort Listens\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.listens - a.playlist.listens;\r\n                });\r\n            }\r\n            else if (propType === \"Sort Likes\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.likers.length - a.playlist.likers.length;\r\n                });\r\n            }\r\n            else if (propType === \"Sort Dislikes\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.dislikers.length - a.playlist.dislikers.length;\r\n                });\r\n            }\r\n\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SORT_PLAYLISTS,\r\n               payload: { pairsArray: store.idNamePairs,\r\n                   pageView: pageView,\r\n                  allPlaylists: allLists }\r\n           });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GlobalStoreContext.Provider value={{\r\n            store\r\n        }}>\r\n            {props.children}\r\n        </GlobalStoreContext.Provider>\r\n    );\r\n}\r\n\r\nexport default GlobalStoreContext;\r\nexport { GlobalStoreContextProvider };"],"mappings":"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"},"metadata":{},"sourceType":"module"}