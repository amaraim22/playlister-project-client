{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keoam\\\\Documents\\\\Github\\\\playlister-project-client\\\\src\\\\store\\\\index.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nimport AuthContext from '../auth';\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\",\n  HIDE_MODALS: \"HIDE_MODALS\",\n  SET_PAGE_VIEW: \"SET_PAGE_VIEW\",\n  GET_ALL_PLAYLISTS: \"GET_ALL_PLAYLISTS\",\n  SORT_PLAYLISTS: \"SORT_PLAYLISTS\",\n  CHANGE_FILTER: \"CHANGE_FILTER\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\nconst CurrentModal = {\n  NONE: \"NONE\",\n  DELETE_LIST: \"DELETE_LIST\",\n  EDIT_SONG: \"EDIT_SONG\",\n  REMOVE_SONG: \"REMOVE_SONG\"\n};\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    currentModal: CurrentModal.NONE,\n    pageView: \"HOME\",\n    idNamePairs: [],\n    currentList: null,\n    currentSongIndex: -1,\n    currentSong: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listIdMarkedForDeletion: null,\n    listMarkedForDeletion: null,\n    allPlaylists: null,\n    filter: \"\"\n  });\n  const history = useHistory();\n  console.log(\"inside useGlobalStore\");\n\n  // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n  const {\n    auth\n  } = useContext(AuthContext);\n  console.log(\"auth: \" + auth);\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            filter: \"\"\n          }));\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentList: null,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentList: payload,\n            currentSongIndex: -1,\n            currentSong: null,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            filter: \"\"\n          }));\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            idNamePairs: payload.pairsArray,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.DELETE_LIST,\n            currentList: store.currentList,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: payload.id,\n            listMarkedForDeletion: payload.playlist\n          }));\n        }\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: null,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            allPlaylists: store.allPlaylists\n          }));\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentList: payload,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentList: payload,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: true,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      // \n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.EDIT_SONG,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      case GlobalStoreActionType.REMOVE_SONG:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.REMOVE_SONG,\n            currentSongIndex: payload.currentSongIndex,\n            currentSong: payload.currentSong,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      case GlobalStoreActionType.HIDE_MODALS:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null\n          }));\n        }\n      case GlobalStoreActionType.SET_PAGE_VIEW:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            pageView: payload,\n            currentList: null,\n            filter: \"\"\n          }));\n        }\n      case GlobalStoreActionType.GET_ALL_PLAYLISTS:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            allPlaylists: payload\n          }));\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.SORT_PLAYLISTS:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentList: null,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            allPlaylists: payload.allPlaylists,\n            idNamePairs: payload.pairsArray,\n            pageView: payload.pageView\n          }));\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.CHANGE_FILTER:\n        {\n          return setStore(prevState => ({\n            ...prevState,\n            currentModal: CurrentModal.NONE,\n            currentList: null,\n            currentSongIndex: -1,\n            currentSong: null,\n            listNameActive: false,\n            listIdMarkedForDeletion: null,\n            listMarkedForDeletion: null,\n            pageView: payload.pageView,\n            filter: payload.string\n          }));\n        }\n      default:\n        return store;\n    }\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                history.push(\"/\");\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  };\n\n  // THIS FUNCTION CREATES A NEW LIST\n  store.createNewList = async function () {\n    async function asyncCreateNewList() {\n      let newListName = \"Untitled\" + store.newListCounter;\n      const response = await api.createPlaylist(newListName, [], auth.user.email, auth.user.username, null, 0, [], [], []);\n      console.log(\"createNewList response: \" + response);\n      if (response.status === 201) {\n        tps.clearAllTransactions();\n        let newList = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newList\n        });\n\n        // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        store.loadIdNamePairs();\n        history.push(\"/\");\n      } else {\n        console.log(\"API FAILED TO CREATE A NEW LIST\");\n      }\n    }\n    asyncCreateNewList();\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      let response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n            payload: {\n              pairsArray: pairsArray\n            }\n          });\n        }\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.getAllPlaylists = function () {\n    async function asyncGetAllPlaylists() {\n      let response = await api.getPlaylists();\n      if (response.data.success) {\n        let allLists = response.data.playlists;\n        storeReducer({\n          type: GlobalStoreActionType.GET_ALL_PLAYLISTS,\n          payload: allLists\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncGetAllPlaylists();\n  };\n\n  // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n  store.markListForDeletion = function (id) {\n    async function getListToDelete(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            id: id,\n            playlist: playlist\n          }\n        });\n      }\n    }\n    getListToDelete(id);\n  };\n  store.deleteList = async function (id) {\n    async function processDelete(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        history.push(\"/\");\n      }\n    }\n    await processDelete(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listIdMarkedForDeletion);\n    store.hideModals();\n  };\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  };\n  // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n  // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n  store.showEditSongModal = (songIndex, songToEdit) => {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToEdit\n      }\n    });\n  };\n  store.showRemoveSongModal = (songIndex, songToRemove) => {\n    storeReducer({\n      type: GlobalStoreActionType.REMOVE_SONG,\n      payload: {\n        currentSongIndex: songIndex,\n        currentSong: songToRemove\n      }\n    });\n  };\n  store.hideModals = () => {\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_MODALS,\n      payload: {}\n    });\n  };\n  store.isDeleteListModalOpen = () => {\n    return store.currentModal === CurrentModal.DELETE_LIST;\n  };\n  store.isEditSongModalOpen = () => {\n    return store.currentModal === CurrentModal.EDIT_SONG;\n  };\n  store.isRemoveSongModalOpen = () => {\n    return store.currentModal === CurrentModal.REMOVE_SONG;\n  };\n\n  // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        history.push(\"/\");\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.publishPlaylist = function (list) {\n    list.publishedDate = new Date();\n    async function asyncPublishList() {\n      const response = await api.updatePlaylistById(list._id, list);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n      }\n    }\n    asyncPublishList();\n  };\n  store.duplicatePlaylist = function (list) {\n    async function asyncDuplicatePlaylist() {\n      const response = await api.createPlaylist(list.name + \" copy\", list.songs, auth.user.email, auth.user.username, null, 0, [], [], []);\n      console.log(\"createNewList response: \" + response);\n      if (response.status === 201) {\n        tps.clearAllTransactions();\n        let newList = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newList\n        });\n\n        // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDuplicatePlaylist();\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.addNewSong = function () {\n    let index = this.getPlaylistSize();\n    this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\n  // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\n  store.createSong = function (index, song) {\n    let list = store.currentList;\n    list.songs.splice(index, 0, song);\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList(list);\n  };\n  // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n  // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList(list);\n  };\n  // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\n  // FROM THE CURRENT LIST\n  store.removeSong = function (index) {\n    let list = store.currentList;\n    list.songs.splice(index, 1);\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList(list);\n  };\n  // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\n  store.updateSong = function (index, songData) {\n    let list = store.currentList;\n    let song = list.songs[index];\n    song.title = songData.title;\n    song.artist = songData.artist;\n    song.youTubeId = songData.youTubeId;\n\n    // NOW MAKE IT OFFICIAL\n    store.updateCurrentList(list);\n  };\n  store.addNewSong = () => {\n    let playlistSize = store.getPlaylistSize();\n    store.addCreateSongTransaction(playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\n  };\n  // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\n  store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\n    // ADD A SONG ITEM AND ITS NUMBER\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n  // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\n  store.addRemoveSongTransaction = () => {\n    let index = store.currentSongIndex;\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, index, song);\n    tps.addTransaction(transaction);\n  };\n  store.addUpdateSongTransaction = function (index, newSongData) {\n    let song = store.currentList.songs[index];\n    let oldSongData = {\n      title: song.title,\n      artist: song.artist,\n      youTubeId: song.youTubeId\n    };\n    let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);\n    tps.addTransaction(transaction);\n  };\n  store.updateCurrentList = function (list) {\n    async function asyncUpdateCurrentList(list) {\n      const response = await api.updatePlaylistById(list._id, list);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n        store.loadIdNamePairs();\n        store.getAllPlaylists();\n        history.push(\"/\");\n      }\n    }\n    asyncUpdateCurrentList(list);\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canAddNewSong = function () {\n    return store.currentList !== null;\n  };\n  store.canUndo = function () {\n    return store.currentList !== null && tps.hasTransactionToUndo();\n  };\n  store.canRedo = function () {\n    return store.currentList !== null && tps.hasTransactionToRedo();\n  };\n  store.canClose = function () {\n    return store.currentList !== null;\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.addComment = function (list, newCommentBody) {\n    console.log(newCommentBody);\n    let newComment = {\n      body: newCommentBody,\n      owner: auth.user.username,\n      postedDate: new Date()\n    };\n    list.comments.push(newComment);\n    //list.comments = [];\n    console.log(list);\n    store.updateCurrentList(list);\n  };\n  store.incrementListens = function (id) {\n    async function asyncIncrementListens(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (playlist.publishedDate != null) {\n          playlist.listens += 1;\n          store.updateCurrentList(playlist);\n        }\n      }\n    }\n    asyncIncrementListens(id);\n  };\n  store.changePageView = function (pageType) {\n    storeReducer({\n      type: GlobalStoreActionType.SET_PAGE_VIEW,\n      payload: pageType\n    });\n  };\n  store.changeFilter = function (keyWord, pageView) {\n    storeReducer({\n      type: GlobalStoreActionType.CHANGE_FILTER,\n      payload: {\n        pageView: pageView,\n        string: keyWord\n      }\n    });\n  };\n  store.sortPlaylists = function (propType, pageView) {\n    if (pageView === \"HOME\") {\n      let pairsArray = store.idNamePairs;\n      if (propType === \"Sort Name\") {\n        pairsArray.sort((a, b) => a.name.localeCompare(b.name, undefined, {\n          sensitivity: 'base'\n        }));\n      } else if (propType === \"Sort Creation Date\") {\n        pairsArray.sort(function (a, b) {\n          return new Date(a.playlist.createdAt) - new Date(b.playlist.createdAt);\n        });\n      } else if (propType === \"Sort Last Edit Date\") {\n        pairsArray.sort(function (a, b) {\n          return new Date(b.playlist.updatedAt) - new Date(a.playlist.updatedAt);\n        });\n      }\n      storeReducer({\n        type: GlobalStoreActionType.SORT_PLAYLISTS,\n        payload: {\n          pairsArray: pairsArray,\n          pageView: pageView,\n          allPlaylists: store.allPlaylists\n        }\n      });\n    } else if (pageView === \"ALL\" || pageView === \"USER\") {\n      let allLists = store.allPlaylists;\n      if (propType === \"Sort Name\") {\n        allLists.sort((a, b) => a.name.localeCompare(b.name, undefined, {\n          sensitivity: 'base'\n        }));\n      } else if (propType === \"Sort Publish Date\") {\n        allLists.sort(function (a, b) {\n          return new Date(b.playlist.publishedDate) - new Date(a.playlist.publishedDate);\n        });\n      } else if (propType === \"Sort Listens\") {\n        allLists.sort(function (a, b) {\n          return b.playlist.listens - a.playlist.listens;\n        });\n      } else if (propType === \"Sort Likes\") {\n        allLists.sort(function (a, b) {\n          return b.playlist.likers.length - a.playlist.likers.length;\n        });\n      } else if (propType === \"Sort Dislikes\") {\n        allLists.sort(function (a, b) {\n          return b.playlist.dislikers.length - a.playlist.dislikers.length;\n        });\n      }\n      storeReducer({\n        type: GlobalStoreActionType.SORT_PLAYLISTS,\n        payload: {\n          pairsArray: store.idNamePairs,\n          pageView: pageView,\n          allPlaylists: allLists\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 732,\n    columnNumber: 9\n  }, this);\n}\n_s(GlobalStoreContextProvider, \"pEVMuTqZDf1DdQnQctUTQi2l9cQ=\", false, function () {\n  return [useHistory];\n});\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\nvar _c;\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useHistory","jsTPS","api","CreateSong_Transaction","MoveSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","AuthContext","GlobalStoreContext","console","log","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SONG","REMOVE_SONG","HIDE_MODALS","SET_PAGE_VIEW","GET_ALL_PLAYLISTS","SORT_PLAYLISTS","CHANGE_FILTER","tps","CurrentModal","NONE","DELETE_LIST","GlobalStoreContextProvider","props","store","setStore","currentModal","pageView","idNamePairs","currentList","currentSongIndex","currentSong","newListCounter","listNameActive","listIdMarkedForDeletion","listMarkedForDeletion","allPlaylists","filter","history","auth","storeReducer","action","type","payload","prevState","playlist","pairsArray","id","string","changeListName","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","push","closeCurrentList","clearAllTransactions","createNewList","asyncCreateNewList","newListName","createPlaylist","user","email","username","status","newList","loadIdNamePairs","asyncLoadIdNamePairs","getAllPlaylists","asyncGetAllPlaylists","getPlaylists","allLists","playlists","markListForDeletion","getListToDelete","deleteList","processDelete","deletePlaylistById","deleteMarkedList","hideModals","unmarkListForDeletion","showEditSongModal","songIndex","songToEdit","showRemoveSongModal","songToRemove","isDeleteListModalOpen","isEditSongModalOpen","isRemoveSongModalOpen","setCurrentList","asyncSetCurrentList","publishPlaylist","list","publishedDate","Date","asyncPublishList","duplicatePlaylist","asyncDuplicatePlaylist","songs","getPlaylistSize","length","addNewSong","index","addCreateSongTransaction","createSong","song","splice","updateCurrentList","moveSong","start","end","temp","i","removeSong","updateSong","songData","title","artist","youTubeId","playlistSize","transaction","addTransaction","addMoveSongTransaction","addRemoveSongTransaction","addUpdateSongTransaction","newSongData","oldSongData","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","canAddNewSong","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","canClose","setIsListNameEditActive","addComment","newCommentBody","newComment","body","owner","postedDate","comments","incrementListens","asyncIncrementListens","listens","changePageView","pageType","changeFilter","keyWord","sortPlaylists","propType","sort","a","b","localeCompare","undefined","sensitivity","createdAt","updatedAt","likers","dislikers","children"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from './store-request-api'\r\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction'\r\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction'\r\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction'\r\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction'\r\nimport AuthContext from '../auth'\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\r\nexport const GlobalStoreContext = createContext({});\r\nconsole.log(\"create GlobalStoreContext\");\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    EDIT_SONG: \"EDIT_SONG\",\r\n    REMOVE_SONG: \"REMOVE_SONG\",\r\n    HIDE_MODALS: \"HIDE_MODALS\",\r\n    SET_PAGE_VIEW: \"SET_PAGE_VIEW\",\r\n    GET_ALL_PLAYLISTS: \"GET_ALL_PLAYLISTS\",\r\n    SORT_PLAYLISTS: \"SORT_PLAYLISTS\",\r\n    CHANGE_FILTER: \"CHANGE_FILTER\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\nconst CurrentModal = {\r\n    NONE : \"NONE\",\r\n    DELETE_LIST : \"DELETE_LIST\",\r\n    EDIT_SONG : \"EDIT_SONG\",\r\n    REMOVE_SONG : \"REMOVE_SONG\"\r\n}\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nfunction GlobalStoreContextProvider(props) {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        currentModal : CurrentModal.NONE,\r\n        pageView: \"HOME\",\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        currentSongIndex : -1,\r\n        currentSong : null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listIdMarkedForDeletion: null,\r\n        listMarkedForDeletion: null,\r\n        allPlaylists: null,\r\n        filter: \"\",\r\n    });\r\n    const history = useHistory();\r\n\r\n    console.log(\"inside useGlobalStore\");\r\n\r\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\r\n    const { auth } = useContext(AuthContext);\r\n    console.log(\"auth: \" + auth);\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {                \r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: payload,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    idNamePairs: payload.pairsArray,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.DELETE_LIST,\r\n                    currentList: store.currentList,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: payload.id,\r\n                    listMarkedForDeletion: payload.playlist,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    allPlaylists: store.allPlaylists,\r\n                }));\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentList: payload,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: payload,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: true,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            // \r\n            case GlobalStoreActionType.EDIT_SONG: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.EDIT_SONG,\r\n                    currentSongIndex: payload.currentSongIndex,\r\n                    currentSong: payload.currentSong,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.REMOVE_SONG: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.REMOVE_SONG,\r\n                    currentSongIndex: payload.currentSongIndex,\r\n                    currentSong: payload.currentSong,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.HIDE_MODALS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.SET_PAGE_VIEW: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    pageView: payload,\r\n                    currentList: null,\r\n                    filter: \"\",\r\n                }));\r\n            }\r\n            case GlobalStoreActionType.GET_ALL_PLAYLISTS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    allPlaylists: payload,\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.SORT_PLAYLISTS: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    allPlaylists: payload.allPlaylists,\r\n                    idNamePairs: payload.pairsArray,\r\n                    pageView: payload.pageView,\r\n                }));\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.CHANGE_FILTER: {\r\n                return setStore((prevState) => ({\r\n                    ...prevState,\r\n                    currentModal : CurrentModal.NONE,\r\n                    currentList: null,\r\n                    currentSongIndex: -1,\r\n                    currentSong: null,\r\n                    listNameActive: false,\r\n                    listIdMarkedForDeletion: null,\r\n                    listMarkedForDeletion: null,\r\n                    pageView: payload.pageView,\r\n                    filter: payload.string,\r\n                }));\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                                history.push(\"/\");\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n        tps.clearAllTransactions();\r\n\r\n        history.push(\"/\");\r\n    }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = async function () {\r\n        async function asyncCreateNewList() {\r\n            let newListName = \"Untitled\" + store.newListCounter;\r\n            const response = await api.createPlaylist(newListName, [], auth.user.email, auth.user.username, null, 0, [], [], []);\r\n            console.log(\"createNewList response: \" + response);\r\n            if (response.status === 201) {\r\n                tps.clearAllTransactions();\r\n                let newList = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: newList\r\n                }\r\n                );\r\n\r\n                // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n                store.loadIdNamePairs();\r\n                history.push(\"/\");\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            let response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                        payload: { pairsArray: pairsArray }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.getAllPlaylists = function () {\r\n        async function asyncGetAllPlaylists() {\r\n            let response = await api.getPlaylists();\r\n            if (response.data.success) {\r\n                let allLists = response.data.playlists;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.GET_ALL_PLAYLISTS,\r\n                    payload: allLists\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncGetAllPlaylists();\r\n    }\r\n\r\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = function (id) {\r\n        async function getListToDelete(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                    payload: {id: id, playlist: playlist}\r\n                });\r\n            }\r\n        }\r\n        getListToDelete(id);\r\n    }\r\n    store.deleteList = async function (id) {\r\n        async function processDelete(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        await processDelete(id);\r\n    }\r\n    store.deleteMarkedList = function() {\r\n        store.deleteList(store.listIdMarkedForDeletion);\r\n        store.hideModals();\r\n    }\r\n    store.unmarkListForDeletion = function() {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\r\n            payload: null\r\n        });\r\n    }\r\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\r\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\r\n\r\n    store.showEditSongModal = (songIndex, songToEdit) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.EDIT_SONG,\r\n            payload: {currentSongIndex: songIndex, currentSong: songToEdit}\r\n        });        \r\n    }\r\n    store.showRemoveSongModal = (songIndex, songToRemove) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.REMOVE_SONG,\r\n            payload: {currentSongIndex: songIndex, currentSong: songToRemove}\r\n        });        \r\n    }\r\n    store.hideModals = () => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.HIDE_MODALS,\r\n            payload: {}\r\n        });    \r\n    }\r\n    store.isDeleteListModalOpen = () => {\r\n        return store.currentModal === CurrentModal.DELETE_LIST;\r\n    }\r\n    store.isEditSongModalOpen = () => {\r\n        return store.currentModal === CurrentModal.EDIT_SONG;\r\n    }\r\n    store.isRemoveSongModalOpen = () => {\r\n        return store.currentModal === CurrentModal.REMOVE_SONG;\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: playlist\r\n                });\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n\r\n    store.publishPlaylist = function (list) {     \r\n        list.publishedDate = new Date();\r\n        async function asyncPublishList() {\r\n            const response = await api.updatePlaylistById(list._id, list);\r\n            if (response.data.success) {\r\n                store.loadIdNamePairs();\r\n            }\r\n        }\r\n        asyncPublishList();\r\n    }\r\n\r\n    store.duplicatePlaylist = function (list) {\r\n        async function asyncDuplicatePlaylist() { \r\n            const response = await api.createPlaylist(list.name + \" copy\", list.songs, auth.user.email, auth.user.username, null, 0, [], [], []);\r\n            console.log(\"createNewList response: \" + response);\r\n            if (response.status === 201) {\r\n                tps.clearAllTransactions();\r\n                let newList = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: newList\r\n                }\r\n                );\r\n\r\n                // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n                store.loadIdNamePairs();\r\n            }\r\n        }\r\n        asyncDuplicatePlaylist();\r\n    }\r\n\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.addNewSong = function() {\r\n        let index = this.getPlaylistSize();\r\n        this.addCreateSongTransaction(index, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\r\n    }\r\n    // THIS FUNCTION CREATES A NEW SONG IN THE CURRENT LIST\r\n    // USING THE PROVIDED DATA AND PUTS THIS SONG AT INDEX\r\n    store.createSong = function(index, song) {\r\n        let list = store.currentList;      \r\n        list.songs.splice(index, 0, song);\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\r\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\r\n    store.moveSong = function(start, end) {\r\n        let list = store.currentList;\r\n\r\n        // WE NEED TO UPDATE THE STATE FOR THE APP\r\n        if (start < end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i < end; i++) {\r\n                list.songs[i] = list.songs[i + 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i > end; i--) {\r\n                list.songs[i] = list.songs[i - 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION REMOVES THE SONG AT THE index LOCATION\r\n    // FROM THE CURRENT LIST\r\n    store.removeSong = function(index) {\r\n        let list = store.currentList;      \r\n        list.songs.splice(index, 1); \r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    // THIS FUNCTION UPDATES THE TEXT IN THE ITEM AT index TO text\r\n    store.updateSong = function(index, songData) {\r\n        let list = store.currentList;\r\n        let song = list.songs[index];\r\n        song.title = songData.title;\r\n        song.artist = songData.artist;\r\n        song.youTubeId = songData.youTubeId;\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList(list);\r\n    }\r\n    store.addNewSong = () => {\r\n        let playlistSize = store.getPlaylistSize();\r\n        store.addCreateSongTransaction(\r\n            playlistSize, \"Untitled\", \"?\", \"dQw4w9WgXcQ\");\r\n    }\r\n    // THIS FUNCDTION ADDS A CreateSong_Transaction TO THE TRANSACTION STACK\r\n    store.addCreateSongTransaction = (index, title, artist, youTubeId) => {\r\n        // ADD A SONG ITEM AND ITS NUMBER\r\n        let song = {\r\n            title: title,\r\n            artist: artist,\r\n            youTubeId: youTubeId\r\n        };\r\n        let transaction = new CreateSong_Transaction(store, index, song);\r\n        tps.addTransaction(transaction);\r\n    }    \r\n    store.addMoveSongTransaction = function (start, end) {\r\n        let transaction = new MoveSong_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    // THIS FUNCTION ADDS A RemoveSong_Transaction TO THE TRANSACTION STACK\r\n    store.addRemoveSongTransaction = () => {\r\n        let index = store.currentSongIndex;\r\n        let song = store.currentList.songs[index];\r\n        let transaction = new RemoveSong_Transaction(store, index, song);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.addUpdateSongTransaction = function (index, newSongData) {\r\n        let song = store.currentList.songs[index];\r\n        let oldSongData = {\r\n            title: song.title,\r\n            artist: song.artist,\r\n            youTubeId: song.youTubeId\r\n        };\r\n        let transaction = new UpdateSong_Transaction(this, index, oldSongData, newSongData);        \r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.updateCurrentList = function(list) {\r\n        async function asyncUpdateCurrentList(list) {\r\n            const response = await api.updatePlaylistById(list._id, list);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: playlist\r\n                });\r\n                store.loadIdNamePairs();\r\n                store.getAllPlaylists();\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n        asyncUpdateCurrentList(list);\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n    store.canAddNewSong = function() {\r\n        return (store.currentList !== null);\r\n    }\r\n    store.canUndo = function() {\r\n        return ((store.currentList !== null) && tps.hasTransactionToUndo());\r\n    }\r\n    store.canRedo = function() {\r\n        return ((store.currentList !== null) && tps.hasTransactionToRedo());\r\n    }\r\n    store.canClose = function() {\r\n        return (store.currentList !== null);\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n    store.addComment = function(list, newCommentBody) {\r\n        console.log(newCommentBody);\r\n        let newComment = { body: newCommentBody, owner: auth.user.username, postedDate: new Date() };\r\n        list.comments.push(newComment);\r\n        //list.comments = [];\r\n        console.log(list);\r\n        store.updateCurrentList(list);\r\n    }\r\n    store.incrementListens = function(id) {\r\n        async function asyncIncrementListens(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                if (playlist.publishedDate != null) {\r\n                    playlist.listens += 1;\r\n                    store.updateCurrentList(playlist);\r\n                }\r\n            }\r\n        }\r\n        asyncIncrementListens(id);\r\n    }\r\n    store.changePageView = function (pageType) {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_PAGE_VIEW,\r\n            payload: pageType\r\n        });\r\n    }\r\n    store.changeFilter = function (keyWord, pageView) {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CHANGE_FILTER,\r\n            payload: { pageView: pageView,\r\n                string: keyWord }\r\n        });\r\n    }\r\n    store.sortPlaylists = function (propType, pageView) {\r\n        if (pageView === \"HOME\") {\r\n            let pairsArray = store.idNamePairs;\r\n            if (propType === \"Sort Name\") {\r\n                pairsArray.sort((a,b)=> a.name.localeCompare(b.name, undefined, {sensitivity: 'base'}));  \r\n            }\r\n            else if (propType === \"Sort Creation Date\") {\r\n                pairsArray.sort(function(a,b){\r\n                    return new Date(a.playlist.createdAt) - new Date(b.playlist.createdAt);\r\n                });                \r\n            } \r\n            else if (propType === \"Sort Last Edit Date\") {\r\n                pairsArray.sort(function(a,b){\r\n                    return new Date(b.playlist.updatedAt) - new Date(a.playlist.updatedAt);\r\n                });\r\n            }\r\n\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SORT_PLAYLISTS,\r\n                payload: { pairsArray: pairsArray,\r\n                            pageView: pageView,\r\n                            allPlaylists: store.allPlaylists }\r\n            });\r\n        }\r\n        else if (pageView === \"ALL\" || pageView === \"USER\") {\r\n            let allLists = store.allPlaylists;\r\n            if (propType === \"Sort Name\") {\r\n                allLists.sort((a,b)=> a.name.localeCompare(b.name, undefined, {sensitivity: 'base'}));\r\n            }\r\n            else if (propType === \"Sort Publish Date\") {\r\n                allLists.sort(function(a,b){\r\n                    return new Date(b.playlist.publishedDate) - new Date(a.playlist.publishedDate);\r\n                });\r\n            }\r\n            else if (propType === \"Sort Listens\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.listens - a.playlist.listens;\r\n                });\r\n            }\r\n            else if (propType === \"Sort Likes\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.likers.length - a.playlist.likers.length;\r\n                });\r\n            }\r\n            else if (propType === \"Sort Dislikes\") {\r\n                allLists.sort(function(a,b){\r\n                    return b.playlist.dislikers.length - a.playlist.dislikers.length;\r\n                });\r\n            }\r\n\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SORT_PLAYLISTS,\r\n               payload: { pairsArray: store.idNamePairs,\r\n                   pageView: pageView,\r\n                  allPlaylists: allLists }\r\n           });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GlobalStoreContext.Provider value={{\r\n            store\r\n        }}>\r\n            {props.children}\r\n        </GlobalStoreContext.Provider>\r\n    );\r\n}\r\n\r\nexport default GlobalStoreContext;\r\nexport { GlobalStoreContextProvider };"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAOC,oBAAoB,MAAM,sCAAsC;AACvE,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAOC,WAAW,MAAM,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA,OAAO,MAAMC,kBAAkB,gBAAGX,aAAa,CAAC,CAAC,CAAC,CAAC;AACnDY,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;AAExC;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBAAkB;EACpCC,kBAAkB,EAAE,oBAAoB;EACxCC,eAAe,EAAE,iBAAiB;EAClCC,kBAAkB,EAAE,oBAAoB;EACxCC,sBAAsB,EAAE,wBAAwB;EAChDC,wBAAwB,EAAE,0BAA0B;EACpDC,gBAAgB,EAAE,kBAAkB;EACpCC,yBAAyB,EAAE,2BAA2B;EACtDC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE,aAAa;EAC1BC,aAAa,EAAE,eAAe;EAC9BC,iBAAiB,EAAE,mBAAmB;EACtCC,cAAc,EAAE,gBAAgB;EAChCC,aAAa,EAAE;AACnB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAG,IAAI1B,KAAK,EAAE;AAEvB,MAAM2B,YAAY,GAAG;EACjBC,IAAI,EAAG,MAAM;EACbC,WAAW,EAAG,aAAa;EAC3BV,SAAS,EAAG,WAAW;EACvBC,WAAW,EAAG;AAClB,CAAC;;AAED;AACA;AACA,SAASU,0BAA0B,CAACC,KAAK,EAAE;EAAA;EACvC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC;IAC/BoC,YAAY,EAAGP,YAAY,CAACC,IAAI;IAChCO,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,IAAI;IACjBC,gBAAgB,EAAG,CAAC,CAAC;IACrBC,WAAW,EAAG,IAAI;IAClBC,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE,KAAK;IACrBC,uBAAuB,EAAE,IAAI;IAC7BC,qBAAqB,EAAE,IAAI;IAC3BC,YAAY,EAAE,IAAI;IAClBC,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,OAAO,GAAG/C,UAAU,EAAE;EAE5BS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;EAEpC;EACA,MAAM;IAAEsC;EAAK,CAAC,GAAGlD,UAAU,CAACS,WAAW,CAAC;EACxCE,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGsC,IAAI,CAAC;;EAE5B;EACA;EACA,MAAMC,YAAY,GAAIC,MAAM,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,MAAM;IAChC,QAAQC,IAAI;MACR;MACA,KAAKxC,qBAAqB,CAACC,gBAAgB;QAAE;UACzC,OAAOsB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCQ,WAAW,EAAEe,OAAO,CAACf,WAAW;YAChCC,WAAW,EAAEc,OAAO,CAACE,QAAQ;YAC7Bf,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE,IAAI;YAC3BE,MAAM,EAAE;UACZ,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKnC,qBAAqB,CAACE,kBAAkB;QAAE;UAC3C,OAAOqB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCS,WAAW,EAAE,IAAI;YACjBC,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKjC,qBAAqB,CAACG,eAAe;QAAE;UACxC,OAAOoB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCS,WAAW,EAAEc,OAAO;YACpBb,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAER,KAAK,CAACQ,cAAc,GAAG,CAAC;YACxCC,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE,IAAI;YAC3BE,MAAM,EAAE;UACZ,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKnC,qBAAqB,CAACI,kBAAkB;QAAE;UAC3C,OAAOmB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCQ,WAAW,EAAEe,OAAO,CAACG,UAAU;YAC/BhB,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKjC,qBAAqB,CAACK,sBAAsB;QAAE;UAC/C,OAAOkB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACE,WAAW;YACvCQ,WAAW,EAAEL,KAAK,CAACK,WAAW;YAC9BC,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAES,OAAO,CAACI,EAAE;YACnCZ,qBAAqB,EAAEQ,OAAO,CAACE;UACnC,CAAC,CAAC,CAAC;QACP;MACA,KAAK3C,qBAAqB,CAACM,wBAAwB;QAAE;UACjD,OAAOiB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAG,IAAI;YACnBI,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE,IAAI;YAC3BC,YAAY,EAAEZ,KAAK,CAACY;UACxB,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKlC,qBAAqB,CAACO,gBAAgB;QAAE;UACzC,OAAOgB,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZf,WAAW,EAAEc,OAAO;YACpBV,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKjC,qBAAqB,CAACQ,yBAAyB;QAAE;UAClD,OAAOe,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCS,WAAW,EAAEc,OAAO;YACpBb,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,IAAI;YACpBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKjC,qBAAqB,CAACS,SAAS;QAAE;UAClC,OAAOc,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACR,SAAS;YACrCmB,gBAAgB,EAAEa,OAAO,CAACb,gBAAgB;YAC1CC,WAAW,EAAEY,OAAO,CAACZ,WAAW;YAChCE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA,KAAKjC,qBAAqB,CAACU,WAAW;QAAE;UACpC,OAAOa,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACP,WAAW;YACvCkB,gBAAgB,EAAEa,OAAO,CAACb,gBAAgB;YAC1CC,WAAW,EAAEY,OAAO,CAACZ,WAAW;YAChCE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA,KAAKjC,qBAAqB,CAACW,WAAW;QAAE;UACpC,OAAOY,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCU,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE;UAC3B,CAAC,CAAC,CAAC;QACP;MACA,KAAKjC,qBAAqB,CAACY,aAAa;QAAE;UACtC,OAAOW,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZjB,QAAQ,EAAEgB,OAAO;YACjBd,WAAW,EAAE,IAAI;YACjBQ,MAAM,EAAE;UACZ,CAAC,CAAC,CAAC;QACP;MACA,KAAKnC,qBAAqB,CAACa,iBAAiB;QAAE;UAC1C,OAAOU,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZR,YAAY,EAAEO;UAClB,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKzC,qBAAqB,CAACc,cAAc;QAAE;UACvC,OAAOS,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCS,WAAW,EAAE,IAAI;YACjBC,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE,IAAI;YAC3BC,YAAY,EAAEO,OAAO,CAACP,YAAY;YAClCR,WAAW,EAAEe,OAAO,CAACG,UAAU;YAC/BnB,QAAQ,EAAEgB,OAAO,CAAChB;UACtB,CAAC,CAAC,CAAC;QACP;MACA;MACA,KAAKzB,qBAAqB,CAACe,aAAa;QAAE;UACtC,OAAOQ,QAAQ,CAAEmB,SAAS,KAAM;YAC5B,GAAGA,SAAS;YACZlB,YAAY,EAAGP,YAAY,CAACC,IAAI;YAChCS,WAAW,EAAE,IAAI;YACjBC,gBAAgB,EAAE,CAAC,CAAC;YACpBC,WAAW,EAAE,IAAI;YACjBE,cAAc,EAAE,KAAK;YACrBC,uBAAuB,EAAE,IAAI;YAC7BC,qBAAqB,EAAE,IAAI;YAC3BR,QAAQ,EAAEgB,OAAO,CAAChB,QAAQ;YAC1BU,MAAM,EAAEM,OAAO,CAACK;UACpB,CAAC,CAAC,CAAC;QACP;MACA;QACI,OAAOxB,KAAK;IAAC;EAEzB,CAAC;;EAED;EACA;EACA;;EAEA;EACAA,KAAK,CAACyB,cAAc,GAAG,UAAUF,EAAE,EAAEG,OAAO,EAAE;IAC1C;IACA,eAAeC,mBAAmB,CAACJ,EAAE,EAAE;MACnC,IAAIK,QAAQ,GAAG,MAAM3D,GAAG,CAAC4D,eAAe,CAACN,EAAE,CAAC;MAC5C,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACrCA,QAAQ,CAACW,IAAI,GAAGN,OAAO;QACvB,eAAeO,UAAU,CAACZ,QAAQ,EAAE;UAChCO,QAAQ,GAAG,MAAM3D,GAAG,CAACiE,kBAAkB,CAACb,QAAQ,CAACc,GAAG,EAAEd,QAAQ,CAAC;UAC/D,IAAIO,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;YACvB,eAAeK,YAAY,CAACf,QAAQ,EAAE;cAClCO,QAAQ,GAAG,MAAM3D,GAAG,CAACoE,gBAAgB,EAAE;cACvC,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;gBACvB,IAAIT,UAAU,GAAGM,QAAQ,CAACE,IAAI,CAAC1B,WAAW;gBAC1CY,YAAY,CAAC;kBACTE,IAAI,EAAExC,qBAAqB,CAACC,gBAAgB;kBAC5CwC,OAAO,EAAE;oBACLf,WAAW,EAAEkB,UAAU;oBACvBD,QAAQ,EAAEA;kBACd;gBACJ,CAAC,CAAC;gBACFP,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;cACrB;YACJ;YACAF,YAAY,CAACf,QAAQ,CAAC;UAC1B;QACJ;QACAY,UAAU,CAACZ,QAAQ,CAAC;MACxB;IACJ;IACAM,mBAAmB,CAACJ,EAAE,CAAC;EAC3B,CAAC;;EAED;EACAvB,KAAK,CAACuC,gBAAgB,GAAG,YAAY;IACjCvB,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACE,kBAAkB;MAC9CuC,OAAO,EAAE,CAAC;IACd,CAAC,CAAC;IACFzB,GAAG,CAAC8C,oBAAoB,EAAE;IAE1B1B,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;EACrB,CAAC;;EAED;EACAtC,KAAK,CAACyC,aAAa,GAAG,kBAAkB;IACpC,eAAeC,kBAAkB,GAAG;MAChC,IAAIC,WAAW,GAAG,UAAU,GAAG3C,KAAK,CAACQ,cAAc;MACnD,MAAMoB,QAAQ,GAAG,MAAM3D,GAAG,CAAC2E,cAAc,CAACD,WAAW,EAAE,EAAE,EAAE5B,IAAI,CAAC8B,IAAI,CAACC,KAAK,EAAE/B,IAAI,CAAC8B,IAAI,CAACE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MACpHvE,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGmD,QAAQ,CAAC;MAClD,IAAIA,QAAQ,CAACoB,MAAM,KAAK,GAAG,EAAE;QACzBtD,GAAG,CAAC8C,oBAAoB,EAAE;QAC1B,IAAIS,OAAO,GAAGrB,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACpCL,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACG,eAAe;UAC3CsC,OAAO,EAAE8B;QACb,CAAC,CACA;;QAED;QACAjD,KAAK,CAACkD,eAAe,EAAE;QACvBpC,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;MACrB,CAAC,MACI;QACD9D,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAClD;IACJ;IACAiE,kBAAkB,EAAE;EACxB,CAAC;;EAED;EACA1C,KAAK,CAACkD,eAAe,GAAG,YAAY;IAChC,eAAeC,oBAAoB,GAAG;MAClC,IAAIvB,QAAQ,GAAG,MAAM3D,GAAG,CAACoE,gBAAgB,EAAE;MAC3C,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIT,UAAU,GAAGM,QAAQ,CAACE,IAAI,CAAC1B,WAAW;QAC1C,IAAIwB,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACvBf,YAAY,CAAC;YACTE,IAAI,EAAExC,qBAAqB,CAACI,kBAAkB;YAC9CqC,OAAO,EAAE;cAAEG,UAAU,EAAEA;YAAW;UACtC,CAAC,CAAC;QACN;MACJ,CAAC,MACI;QACD9C,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACnD;IACJ;IACA0E,oBAAoB,EAAE;EAC1B,CAAC;EAEDnD,KAAK,CAACoD,eAAe,GAAG,YAAY;IAChC,eAAeC,oBAAoB,GAAG;MAClC,IAAIzB,QAAQ,GAAG,MAAM3D,GAAG,CAACqF,YAAY,EAAE;MACvC,IAAI1B,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIwB,QAAQ,GAAG3B,QAAQ,CAACE,IAAI,CAAC0B,SAAS;QACtCxC,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACa,iBAAiB;UAC7C4B,OAAO,EAAEoC;QACb,CAAC,CAAC;MACN,CAAC,MACI;QACD/E,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACnD;IACJ;IACA4E,oBAAoB,EAAE;EAC1B,CAAC;;EAED;EACA;EACA;EACA;EACArD,KAAK,CAACyD,mBAAmB,GAAG,UAAUlC,EAAE,EAAE;IACtC,eAAemC,eAAe,CAACnC,EAAE,EAAE;MAC/B,IAAIK,QAAQ,GAAG,MAAM3D,GAAG,CAAC4D,eAAe,CAACN,EAAE,CAAC;MAC5C,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACrCL,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACK,sBAAsB;UAClDoC,OAAO,EAAE;YAACI,EAAE,EAAEA,EAAE;YAAEF,QAAQ,EAAEA;UAAQ;QACxC,CAAC,CAAC;MACN;IACJ;IACAqC,eAAe,CAACnC,EAAE,CAAC;EACvB,CAAC;EACDvB,KAAK,CAAC2D,UAAU,GAAG,gBAAgBpC,EAAE,EAAE;IACnC,eAAeqC,aAAa,CAACrC,EAAE,EAAE;MAC7B,IAAIK,QAAQ,GAAG,MAAM3D,GAAG,CAAC4F,kBAAkB,CAACtC,EAAE,CAAC;MAC/C,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB/B,KAAK,CAACkD,eAAe,EAAE;QACvBpC,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;MACrB;IACJ;IACA,MAAMsB,aAAa,CAACrC,EAAE,CAAC;EAC3B,CAAC;EACDvB,KAAK,CAAC8D,gBAAgB,GAAG,YAAW;IAChC9D,KAAK,CAAC2D,UAAU,CAAC3D,KAAK,CAACU,uBAAuB,CAAC;IAC/CV,KAAK,CAAC+D,UAAU,EAAE;EACtB,CAAC;EACD/D,KAAK,CAACgE,qBAAqB,GAAG,YAAW;IACrChD,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACM,wBAAwB;MACpDmC,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC;EACD;EACA;;EAEAnB,KAAK,CAACiE,iBAAiB,GAAG,CAACC,SAAS,EAAEC,UAAU,KAAK;IACjDnD,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACS,SAAS;MACrCgC,OAAO,EAAE;QAACb,gBAAgB,EAAE4D,SAAS;QAAE3D,WAAW,EAAE4D;MAAU;IAClE,CAAC,CAAC;EACN,CAAC;EACDnE,KAAK,CAACoE,mBAAmB,GAAG,CAACF,SAAS,EAAEG,YAAY,KAAK;IACrDrD,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACU,WAAW;MACvC+B,OAAO,EAAE;QAACb,gBAAgB,EAAE4D,SAAS;QAAE3D,WAAW,EAAE8D;MAAY;IACpE,CAAC,CAAC;EACN,CAAC;EACDrE,KAAK,CAAC+D,UAAU,GAAG,MAAM;IACrB/C,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACW,WAAW;MACvC8B,OAAO,EAAE,CAAC;IACd,CAAC,CAAC;EACN,CAAC;EACDnB,KAAK,CAACsE,qBAAqB,GAAG,MAAM;IAChC,OAAOtE,KAAK,CAACE,YAAY,KAAKP,YAAY,CAACE,WAAW;EAC1D,CAAC;EACDG,KAAK,CAACuE,mBAAmB,GAAG,MAAM;IAC9B,OAAOvE,KAAK,CAACE,YAAY,KAAKP,YAAY,CAACR,SAAS;EACxD,CAAC;EACDa,KAAK,CAACwE,qBAAqB,GAAG,MAAM;IAChC,OAAOxE,KAAK,CAACE,YAAY,KAAKP,YAAY,CAACP,WAAW;EAC1D,CAAC;;EAED;EACA;EACA;EACA;EACAY,KAAK,CAACyE,cAAc,GAAG,UAAUlD,EAAE,EAAE;IACjC,eAAemD,mBAAmB,CAACnD,EAAE,EAAE;MACnC,IAAIK,QAAQ,GAAG,MAAM3D,GAAG,CAAC4D,eAAe,CAACN,EAAE,CAAC;MAC5C,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACrCL,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACO,gBAAgB;UAC5CkC,OAAO,EAAEE;QACb,CAAC,CAAC;QACFP,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;MACrB;IACJ;IACAoC,mBAAmB,CAACnD,EAAE,CAAC;EAC3B,CAAC;EAEDvB,KAAK,CAAC2E,eAAe,GAAG,UAAUC,IAAI,EAAE;IACpCA,IAAI,CAACC,aAAa,GAAG,IAAIC,IAAI,EAAE;IAC/B,eAAeC,gBAAgB,GAAG;MAC9B,MAAMnD,QAAQ,GAAG,MAAM3D,GAAG,CAACiE,kBAAkB,CAAC0C,IAAI,CAACzC,GAAG,EAAEyC,IAAI,CAAC;MAC7D,IAAIhD,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB/B,KAAK,CAACkD,eAAe,EAAE;MAC3B;IACJ;IACA6B,gBAAgB,EAAE;EACtB,CAAC;EAED/E,KAAK,CAACgF,iBAAiB,GAAG,UAAUJ,IAAI,EAAE;IACtC,eAAeK,sBAAsB,GAAG;MACpC,MAAMrD,QAAQ,GAAG,MAAM3D,GAAG,CAAC2E,cAAc,CAACgC,IAAI,CAAC5C,IAAI,GAAG,OAAO,EAAE4C,IAAI,CAACM,KAAK,EAAEnE,IAAI,CAAC8B,IAAI,CAACC,KAAK,EAAE/B,IAAI,CAAC8B,IAAI,CAACE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MACpIvE,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGmD,QAAQ,CAAC;MAClD,IAAIA,QAAQ,CAACoB,MAAM,KAAK,GAAG,EAAE;QACzBtD,GAAG,CAAC8C,oBAAoB,EAAE;QAC1B,IAAIS,OAAO,GAAGrB,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACpCL,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACG,eAAe;UAC3CsC,OAAO,EAAE8B;QACb,CAAC,CACA;;QAED;QACAjD,KAAK,CAACkD,eAAe,EAAE;MAC3B;IACJ;IACA+B,sBAAsB,EAAE;EAC5B,CAAC;EAEDjF,KAAK,CAACmF,eAAe,GAAG,YAAW;IAC/B,OAAOnF,KAAK,CAACK,WAAW,CAAC6E,KAAK,CAACE,MAAM;EACzC,CAAC;EACDpF,KAAK,CAACqF,UAAU,GAAG,YAAW;IAC1B,IAAIC,KAAK,GAAG,IAAI,CAACH,eAAe,EAAE;IAClC,IAAI,CAACI,wBAAwB,CAACD,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,aAAa,CAAC;EACxE,CAAC;EACD;EACA;EACAtF,KAAK,CAACwF,UAAU,GAAG,UAASF,KAAK,EAAEG,IAAI,EAAE;IACrC,IAAIb,IAAI,GAAG5E,KAAK,CAACK,WAAW;IAC5BuE,IAAI,CAACM,KAAK,CAACQ,MAAM,CAACJ,KAAK,EAAE,CAAC,EAAEG,IAAI,CAAC;IACjC;IACAzF,KAAK,CAAC2F,iBAAiB,CAACf,IAAI,CAAC;EACjC,CAAC;EACD;EACA;EACA5E,KAAK,CAAC4F,QAAQ,GAAG,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAIlB,IAAI,GAAG5E,KAAK,CAACK,WAAW;;IAE5B;IACA,IAAIwF,KAAK,GAAGC,GAAG,EAAE;MACb,IAAIC,IAAI,GAAGnB,IAAI,CAACM,KAAK,CAACW,KAAK,CAAC;MAC5B,KAAK,IAAIG,CAAC,GAAGH,KAAK,EAAEG,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;QAC9BpB,IAAI,CAACM,KAAK,CAACc,CAAC,CAAC,GAAGpB,IAAI,CAACM,KAAK,CAACc,CAAC,GAAG,CAAC,CAAC;MACrC;MACApB,IAAI,CAACM,KAAK,CAACY,GAAG,CAAC,GAAGC,IAAI;IAC1B,CAAC,MACI,IAAIF,KAAK,GAAGC,GAAG,EAAE;MAClB,IAAIC,IAAI,GAAGnB,IAAI,CAACM,KAAK,CAACW,KAAK,CAAC;MAC5B,KAAK,IAAIG,CAAC,GAAGH,KAAK,EAAEG,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;QAC9BpB,IAAI,CAACM,KAAK,CAACc,CAAC,CAAC,GAAGpB,IAAI,CAACM,KAAK,CAACc,CAAC,GAAG,CAAC,CAAC;MACrC;MACApB,IAAI,CAACM,KAAK,CAACY,GAAG,CAAC,GAAGC,IAAI;IAC1B;;IAEA;IACA/F,KAAK,CAAC2F,iBAAiB,CAACf,IAAI,CAAC;EACjC,CAAC;EACD;EACA;EACA5E,KAAK,CAACiG,UAAU,GAAG,UAASX,KAAK,EAAE;IAC/B,IAAIV,IAAI,GAAG5E,KAAK,CAACK,WAAW;IAC5BuE,IAAI,CAACM,KAAK,CAACQ,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;;IAE3B;IACAtF,KAAK,CAAC2F,iBAAiB,CAACf,IAAI,CAAC;EACjC,CAAC;EACD;EACA5E,KAAK,CAACkG,UAAU,GAAG,UAASZ,KAAK,EAAEa,QAAQ,EAAE;IACzC,IAAIvB,IAAI,GAAG5E,KAAK,CAACK,WAAW;IAC5B,IAAIoF,IAAI,GAAGb,IAAI,CAACM,KAAK,CAACI,KAAK,CAAC;IAC5BG,IAAI,CAACW,KAAK,GAAGD,QAAQ,CAACC,KAAK;IAC3BX,IAAI,CAACY,MAAM,GAAGF,QAAQ,CAACE,MAAM;IAC7BZ,IAAI,CAACa,SAAS,GAAGH,QAAQ,CAACG,SAAS;;IAEnC;IACAtG,KAAK,CAAC2F,iBAAiB,CAACf,IAAI,CAAC;EACjC,CAAC;EACD5E,KAAK,CAACqF,UAAU,GAAG,MAAM;IACrB,IAAIkB,YAAY,GAAGvG,KAAK,CAACmF,eAAe,EAAE;IAC1CnF,KAAK,CAACuF,wBAAwB,CAC1BgB,YAAY,EAAE,UAAU,EAAE,GAAG,EAAE,aAAa,CAAC;EACrD,CAAC;EACD;EACAvG,KAAK,CAACuF,wBAAwB,GAAG,CAACD,KAAK,EAAEc,KAAK,EAAEC,MAAM,EAAEC,SAAS,KAAK;IAClE;IACA,IAAIb,IAAI,GAAG;MACPW,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA,MAAM;MACdC,SAAS,EAAEA;IACf,CAAC;IACD,IAAIE,WAAW,GAAG,IAAItI,sBAAsB,CAAC8B,KAAK,EAAEsF,KAAK,EAAEG,IAAI,CAAC;IAChE/F,GAAG,CAAC+G,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EACDxG,KAAK,CAAC0G,sBAAsB,GAAG,UAAUb,KAAK,EAAEC,GAAG,EAAE;IACjD,IAAIU,WAAW,GAAG,IAAIrI,oBAAoB,CAAC6B,KAAK,EAAE6F,KAAK,EAAEC,GAAG,CAAC;IAC7DpG,GAAG,CAAC+G,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EACD;EACAxG,KAAK,CAAC2G,wBAAwB,GAAG,MAAM;IACnC,IAAIrB,KAAK,GAAGtF,KAAK,CAACM,gBAAgB;IAClC,IAAImF,IAAI,GAAGzF,KAAK,CAACK,WAAW,CAAC6E,KAAK,CAACI,KAAK,CAAC;IACzC,IAAIkB,WAAW,GAAG,IAAIpI,sBAAsB,CAAC4B,KAAK,EAAEsF,KAAK,EAAEG,IAAI,CAAC;IAChE/F,GAAG,CAAC+G,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EACDxG,KAAK,CAAC4G,wBAAwB,GAAG,UAAUtB,KAAK,EAAEuB,WAAW,EAAE;IAC3D,IAAIpB,IAAI,GAAGzF,KAAK,CAACK,WAAW,CAAC6E,KAAK,CAACI,KAAK,CAAC;IACzC,IAAIwB,WAAW,GAAG;MACdV,KAAK,EAAEX,IAAI,CAACW,KAAK;MACjBC,MAAM,EAAEZ,IAAI,CAACY,MAAM;MACnBC,SAAS,EAAEb,IAAI,CAACa;IACpB,CAAC;IACD,IAAIE,WAAW,GAAG,IAAInI,sBAAsB,CAAC,IAAI,EAAEiH,KAAK,EAAEwB,WAAW,EAAED,WAAW,CAAC;IACnFnH,GAAG,CAAC+G,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EACDxG,KAAK,CAAC2F,iBAAiB,GAAG,UAASf,IAAI,EAAE;IACrC,eAAemC,sBAAsB,CAACnC,IAAI,EAAE;MACxC,MAAMhD,QAAQ,GAAG,MAAM3D,GAAG,CAACiE,kBAAkB,CAAC0C,IAAI,CAACzC,GAAG,EAAEyC,IAAI,CAAC;MAC7D,IAAIhD,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACrCL,YAAY,CAAC;UACTE,IAAI,EAAExC,qBAAqB,CAACO,gBAAgB;UAC5CkC,OAAO,EAAEE;QACb,CAAC,CAAC;QACFrB,KAAK,CAACkD,eAAe,EAAE;QACvBlD,KAAK,CAACoD,eAAe,EAAE;QACvBtC,OAAO,CAACwB,IAAI,CAAC,GAAG,CAAC;MACrB;IACJ;IACAyE,sBAAsB,CAACnC,IAAI,CAAC;EAChC,CAAC;EACD5E,KAAK,CAACgH,IAAI,GAAG,YAAY;IACrBtH,GAAG,CAACuH,eAAe,EAAE;EACzB,CAAC;EACDjH,KAAK,CAACkH,IAAI,GAAG,YAAY;IACrBxH,GAAG,CAACyH,aAAa,EAAE;EACvB,CAAC;EACDnH,KAAK,CAACoH,aAAa,GAAG,YAAW;IAC7B,OAAQpH,KAAK,CAACK,WAAW,KAAK,IAAI;EACtC,CAAC;EACDL,KAAK,CAACqH,OAAO,GAAG,YAAW;IACvB,OAASrH,KAAK,CAACK,WAAW,KAAK,IAAI,IAAKX,GAAG,CAAC4H,oBAAoB,EAAE;EACtE,CAAC;EACDtH,KAAK,CAACuH,OAAO,GAAG,YAAW;IACvB,OAASvH,KAAK,CAACK,WAAW,KAAK,IAAI,IAAKX,GAAG,CAAC8H,oBAAoB,EAAE;EACtE,CAAC;EACDxH,KAAK,CAACyH,QAAQ,GAAG,YAAW;IACxB,OAAQzH,KAAK,CAACK,WAAW,KAAK,IAAI;EACtC,CAAC;;EAED;EACAL,KAAK,CAAC0H,uBAAuB,GAAG,YAAY;IACxC1G,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACQ,yBAAyB;MACrDiC,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC;EACDnB,KAAK,CAAC2H,UAAU,GAAG,UAAS/C,IAAI,EAAEgD,cAAc,EAAE;IAC9CpJ,OAAO,CAACC,GAAG,CAACmJ,cAAc,CAAC;IAC3B,IAAIC,UAAU,GAAG;MAAEC,IAAI,EAAEF,cAAc;MAAEG,KAAK,EAAEhH,IAAI,CAAC8B,IAAI,CAACE,QAAQ;MAAEiF,UAAU,EAAE,IAAIlD,IAAI;IAAG,CAAC;IAC5FF,IAAI,CAACqD,QAAQ,CAAC3F,IAAI,CAACuF,UAAU,CAAC;IAC9B;IACArJ,OAAO,CAACC,GAAG,CAACmG,IAAI,CAAC;IACjB5E,KAAK,CAAC2F,iBAAiB,CAACf,IAAI,CAAC;EACjC,CAAC;EACD5E,KAAK,CAACkI,gBAAgB,GAAG,UAAS3G,EAAE,EAAE;IAClC,eAAe4G,qBAAqB,CAAC5G,EAAE,EAAE;MACrC,IAAIK,QAAQ,GAAG,MAAM3D,GAAG,CAAC4D,eAAe,CAACN,EAAE,CAAC;MAC5C,IAAIK,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAI,CAACT,QAAQ;QACrC,IAAIA,QAAQ,CAACwD,aAAa,IAAI,IAAI,EAAE;UAChCxD,QAAQ,CAAC+G,OAAO,IAAI,CAAC;UACrBpI,KAAK,CAAC2F,iBAAiB,CAACtE,QAAQ,CAAC;QACrC;MACJ;IACJ;IACA8G,qBAAqB,CAAC5G,EAAE,CAAC;EAC7B,CAAC;EACDvB,KAAK,CAACqI,cAAc,GAAG,UAAUC,QAAQ,EAAE;IACvCtH,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACY,aAAa;MACzC6B,OAAO,EAAEmH;IACb,CAAC,CAAC;EACN,CAAC;EACDtI,KAAK,CAACuI,YAAY,GAAG,UAAUC,OAAO,EAAErI,QAAQ,EAAE;IAC9Ca,YAAY,CAAC;MACTE,IAAI,EAAExC,qBAAqB,CAACe,aAAa;MACzC0B,OAAO,EAAE;QAAEhB,QAAQ,EAAEA,QAAQ;QACzBqB,MAAM,EAAEgH;MAAQ;IACxB,CAAC,CAAC;EACN,CAAC;EACDxI,KAAK,CAACyI,aAAa,GAAG,UAAUC,QAAQ,EAAEvI,QAAQ,EAAE;IAChD,IAAIA,QAAQ,KAAK,MAAM,EAAE;MACrB,IAAImB,UAAU,GAAGtB,KAAK,CAACI,WAAW;MAClC,IAAIsI,QAAQ,KAAK,WAAW,EAAE;QAC1BpH,UAAU,CAACqH,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAID,CAAC,CAAC5G,IAAI,CAAC8G,aAAa,CAACD,CAAC,CAAC7G,IAAI,EAAE+G,SAAS,EAAE;UAACC,WAAW,EAAE;QAAM,CAAC,CAAC,CAAC;MAC3F,CAAC,MACI,IAAIN,QAAQ,KAAK,oBAAoB,EAAE;QACxCpH,UAAU,CAACqH,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACzB,OAAO,IAAI/D,IAAI,CAAC8D,CAAC,CAACvH,QAAQ,CAAC4H,SAAS,CAAC,GAAG,IAAInE,IAAI,CAAC+D,CAAC,CAACxH,QAAQ,CAAC4H,SAAS,CAAC;QAC1E,CAAC,CAAC;MACN,CAAC,MACI,IAAIP,QAAQ,KAAK,qBAAqB,EAAE;QACzCpH,UAAU,CAACqH,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACzB,OAAO,IAAI/D,IAAI,CAAC+D,CAAC,CAACxH,QAAQ,CAAC6H,SAAS,CAAC,GAAG,IAAIpE,IAAI,CAAC8D,CAAC,CAACvH,QAAQ,CAAC6H,SAAS,CAAC;QAC1E,CAAC,CAAC;MACN;MAEAlI,YAAY,CAAC;QACTE,IAAI,EAAExC,qBAAqB,CAACc,cAAc;QAC1C2B,OAAO,EAAE;UAAEG,UAAU,EAAEA,UAAU;UACrBnB,QAAQ,EAAEA,QAAQ;UAClBS,YAAY,EAAEZ,KAAK,CAACY;QAAa;MACjD,CAAC,CAAC;IACN,CAAC,MACI,IAAIT,QAAQ,KAAK,KAAK,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAChD,IAAIoD,QAAQ,GAAGvD,KAAK,CAACY,YAAY;MACjC,IAAI8H,QAAQ,KAAK,WAAW,EAAE;QAC1BnF,QAAQ,CAACoF,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAID,CAAC,CAAC5G,IAAI,CAAC8G,aAAa,CAACD,CAAC,CAAC7G,IAAI,EAAE+G,SAAS,EAAE;UAACC,WAAW,EAAE;QAAM,CAAC,CAAC,CAAC;MACzF,CAAC,MACI,IAAIN,QAAQ,KAAK,mBAAmB,EAAE;QACvCnF,QAAQ,CAACoF,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACvB,OAAO,IAAI/D,IAAI,CAAC+D,CAAC,CAACxH,QAAQ,CAACwD,aAAa,CAAC,GAAG,IAAIC,IAAI,CAAC8D,CAAC,CAACvH,QAAQ,CAACwD,aAAa,CAAC;QAClF,CAAC,CAAC;MACN,CAAC,MACI,IAAI6D,QAAQ,KAAK,cAAc,EAAE;QAClCnF,QAAQ,CAACoF,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACvB,OAAOA,CAAC,CAACxH,QAAQ,CAAC+G,OAAO,GAAGQ,CAAC,CAACvH,QAAQ,CAAC+G,OAAO;QAClD,CAAC,CAAC;MACN,CAAC,MACI,IAAIM,QAAQ,KAAK,YAAY,EAAE;QAChCnF,QAAQ,CAACoF,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACvB,OAAOA,CAAC,CAACxH,QAAQ,CAAC8H,MAAM,CAAC/D,MAAM,GAAGwD,CAAC,CAACvH,QAAQ,CAAC8H,MAAM,CAAC/D,MAAM;QAC9D,CAAC,CAAC;MACN,CAAC,MACI,IAAIsD,QAAQ,KAAK,eAAe,EAAE;QACnCnF,QAAQ,CAACoF,IAAI,CAAC,UAASC,CAAC,EAACC,CAAC,EAAC;UACvB,OAAOA,CAAC,CAACxH,QAAQ,CAAC+H,SAAS,CAAChE,MAAM,GAAGwD,CAAC,CAACvH,QAAQ,CAAC+H,SAAS,CAAChE,MAAM;QACpE,CAAC,CAAC;MACN;MAEApE,YAAY,CAAC;QACTE,IAAI,EAAExC,qBAAqB,CAACc,cAAc;QAC3C2B,OAAO,EAAE;UAAEG,UAAU,EAAEtB,KAAK,CAACI,WAAW;UACpCD,QAAQ,EAAEA,QAAQ;UACnBS,YAAY,EAAE2C;QAAS;MAC9B,CAAC,CAAC;IACL;EACJ,CAAC;EAED,oBACI,QAAC,kBAAkB,CAAC,QAAQ;IAAC,KAAK,EAAE;MAChCvD;IACJ,CAAE;IAAA,UACGD,KAAK,CAACsJ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAEtC;AAAC,GA7qBQvJ,0BAA0B;EAAA,QAgBf/B,UAAU;AAAA;AAAA,KAhBrB+B,0BAA0B;AA+qBnC,eAAevB,kBAAkB;AACjC,SAASuB,0BAA0B;AAAG;AAAA"},"metadata":{},"sourceType":"module"}