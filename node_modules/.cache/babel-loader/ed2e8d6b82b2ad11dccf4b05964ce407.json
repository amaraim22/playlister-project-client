{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\keoam\\\\Documents\\\\Github\\\\playlister-project-client\\\\src\\\\components\\\\PlaylisterYoutubePlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport YouTube from 'react-youtube';\nimport { FastRewind, Stop, PlayArrow, FastForward } from '@mui/icons-material';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlaylisterYoutubePlayer(props) {\n  _s();\n  // THIS EXAMPLE DEMONSTRATES HOW TO DYNAMICALLY MAKE A\n  // YOUTUBE PLAYER AND EMBED IT IN YOUR SITE. IT ALSO\n  // DEMONSTRATES HOW TO IMPLEMENT A PLAYLIST THAT MOVES\n  // FROM ONE SONG TO THE NEXT\n  const {\n    currentList\n  } = props;\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [currentSongPlaying, setCurrentSongPlaying] = useState(null);\n\n  // THIS HAS THE YOUTUBE IDS FOR THE SONGS IN OUR PLAYLIST\n  let playlist = [];\n  for (let i = 0; i < currentList.songs.length; i++) {\n    playlist.push(currentList.songs[i].youTubeId);\n  }\n\n  // THIS IS THE INDEX OF THE SONG CURRENTLY IN USE IN THE PLAYLIST\n  //let currentSongIndex = 0;\n\n  const playerOptions = {\n    height: '300',\n    width: '520',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 0\n    }\n  };\n\n  // THIS FUNCTION LOADS THE CURRENT SONG INTO\n  // THE PLAYER AND PLAYS IT\n  function loadAndPlayCurrentSong(player) {\n    let song = playlist[currentSongIndex];\n    setCurrentSongPlaying(currentList.songs[currentSongIndex]);\n    player.loadVideoById(song);\n    player.playVideo();\n  }\n\n  // THIS FUNCTION INCREMENTS THE PLAYLIST SONG TO THE NEXT ONE\n  function incSong() {\n    if (currentSongIndex < playlist.length - 1) {\n      let idx = currentSongIndex + 1;\n      setCurrentSongIndex(idx);\n    } else setCurrentSongIndex(playlist.length - 1);\n  }\n\n  // THIS FUNCTION INCREMENTS THE PLAYLIST SONG TO THE NEXT ONE\n  function decSong() {\n    if (currentSongIndex > 0) {\n      let idx = currentSongIndex - 1;\n      setCurrentSongIndex(idx);\n    } else setCurrentSongIndex(0);\n  }\n  function onPlayerReady(event) {\n    setCurrentPlayer(event.target);\n    loadAndPlayCurrentSong(event.target);\n    event.target.playVideo();\n  }\n\n  // THIS IS OUR EVENT HANDLER FOR WHEN THE YOUTUBE PLAYER'S STATE\n  // CHANGES. NOTE THAT playerStatus WILL HAVE A DIFFERENT INTEGER\n  // VALUE TO REPRESENT THE TYPE OF STATE CHANGE. A playerStatus\n  // VALUE OF 0 MEANS THE SONG PLAYING HAS ENDED.\n  function onPlayerStateChange(event) {\n    let playerStatus = event.data;\n    let player = event.target;\n    if (playerStatus === -1) {\n      // VIDEO UNSTARTED\n      console.log(\"-1 Video unstarted\");\n    } else if (playerStatus === 0) {\n      // THE VIDEO HAS COMPLETED PLAYING\n      console.log(\"0 Video ended\");\n      incSong();\n      loadAndPlayCurrentSong(player);\n      //setCurrentSongPlaying(currentList.songs[currentSongIndex]);\n    } else if (playerStatus === 1) {\n      // THE VIDEO IS PLAYED\n      console.log(\"1 Video played\");\n    } else if (playerStatus === 2) {\n      // THE VIDEO IS PAUSED\n      console.log(\"2 Video paused\");\n    } else if (playerStatus === 3) {\n      // THE VIDEO IS BUFFERING\n      console.log(\"3 Video buffering\");\n    } else if (playerStatus === 5) {\n      // THE VIDEO HAS BEEN CUED\n      console.log(\"5 Video cued\");\n    }\n  }\n  function handleStopPlaying() {\n    currentPlayer.pauseVideo();\n  }\n  function handleStartPlaying() {\n    currentPlayer.playVideo();\n  }\n  function handleNextSong() {\n    incSong();\n    loadAndPlayCurrentSong(currentPlayer);\n    handleStartPlaying();\n  }\n  function handlePrevSong() {\n    decSong();\n    loadAndPlayCurrentSong(currentPlayer);\n    handleStartPlaying();\n  }\n  let currentSongStyle = {\n    fontSize: 15,\n    textAlign: 'center',\n    fontFamily: 'Raleway',\n    color: '#463f3a'\n  };\n  let songPlayerButtons = {\n    fontSize: 35,\n    color: '#463f3a'\n  };\n  let playerButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"youtube-player-button\",\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      spacing: 0.5,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: !(currentSongIndex >= 0),\n        children: /*#__PURE__*/_jsxDEV(FastRewind, {\n          onClick: handlePrevSong,\n          sx: songPlayerButtons\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(Stop, {\n          onClick: handleStopPlaying,\n          sx: songPlayerButtons\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(PlayArrow, {\n          onClick: handleStartPlaying,\n          sx: songPlayerButtons\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: !(currentSongIndex < playlist.length),\n        children: /*#__PURE__*/_jsxDEV(FastForward, {\n          onClick: handleNextSong,\n          sx: songPlayerButtons\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n  let currentSongText = \"\";\n  if (currentSongPlaying) {\n    currentSongText = /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"current-song-text\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: currentSongStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Playlist: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 51\n        }, this), \" \", currentList.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: currentSongStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Song Number: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 51\n        }, this), \" \", currentSongIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: currentSongStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 51\n        }, this), \" \", currentSongPlaying.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: currentSongStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Artist: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 51\n        }, this), \" \", currentSongPlaying.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n  let youtube = /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"empty-playlist-text\",\n    children: \"ADD A SONG TO LOAD YOUTUBE PLAYER\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n  if (playlist.length !== 0) {\n    youtube = /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: playlist[currentSongIndex],\n      opts: playerOptions,\n      onReady: onPlayerReady,\n      onStateChange: onPlayerStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [youtube, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"youtube-player-text\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          paddingTop: '1.5%',\n          fontSize: '25px',\n          textAlign: 'center',\n          fontWeight: 'bold',\n          color: '#463f3a'\n        },\n        children: \"Now Playing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), currentSongText, playerButtons]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 12\n  }, this);\n}\n_s(PlaylisterYoutubePlayer, \"knDTzeLtGrSZnU8oAdd0uVstJt0=\");\n_c = PlaylisterYoutubePlayer;\nexport default PlaylisterYoutubePlayer;\nvar _c;\n$RefreshReg$(_c, \"PlaylisterYoutubePlayer\");","map":{"version":3,"names":["React","useState","YouTube","FastRewind","Stop","PlayArrow","FastForward","Stack","Typography","IconButton","PlaylisterYoutubePlayer","props","currentList","currentPlayer","setCurrentPlayer","currentSongIndex","setCurrentSongIndex","currentSongPlaying","setCurrentSongPlaying","playlist","i","songs","length","push","youTubeId","playerOptions","height","width","playerVars","autoplay","loadAndPlayCurrentSong","player","song","loadVideoById","playVideo","incSong","idx","decSong","onPlayerReady","event","target","onPlayerStateChange","playerStatus","data","console","log","handleStopPlaying","pauseVideo","handleStartPlaying","handleNextSong","handlePrevSong","currentSongStyle","fontSize","textAlign","fontFamily","color","songPlayerButtons","playerButtons","currentSongText","fontWeight","name","title","artist","youtube","paddingTop"],"sources":["C:/Users/keoam/Documents/Github/playlister-project-client/src/components/PlaylisterYoutubePlayer.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport YouTube from 'react-youtube';\r\n\r\nimport { FastRewind, Stop, PlayArrow, FastForward } from '@mui/icons-material';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nfunction PlaylisterYoutubePlayer(props) {\r\n    // THIS EXAMPLE DEMONSTRATES HOW TO DYNAMICALLY MAKE A\r\n    // YOUTUBE PLAYER AND EMBED IT IN YOUR SITE. IT ALSO\r\n    // DEMONSTRATES HOW TO IMPLEMENT A PLAYLIST THAT MOVES\r\n    // FROM ONE SONG TO THE NEXT\r\n    const { currentList } = props;\r\n    const [ currentPlayer, setCurrentPlayer] = useState(null);\r\n    const [ currentSongIndex, setCurrentSongIndex] = useState(0);\r\n    const [ currentSongPlaying, setCurrentSongPlaying] = useState(null);\r\n\r\n    // THIS HAS THE YOUTUBE IDS FOR THE SONGS IN OUR PLAYLIST\r\n    let playlist = [];\r\n    for(let i = 0; i < currentList.songs.length; i++) {\r\n        playlist.push(currentList.songs[i].youTubeId);\r\n    }\r\n\r\n    // THIS IS THE INDEX OF THE SONG CURRENTLY IN USE IN THE PLAYLIST\r\n    //let currentSongIndex = 0;\r\n\r\n    const playerOptions = {\r\n        height: '300',\r\n        width: '520',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 0,\r\n        },\r\n    };\r\n\r\n    // THIS FUNCTION LOADS THE CURRENT SONG INTO\r\n    // THE PLAYER AND PLAYS IT\r\n    function loadAndPlayCurrentSong(player) {\r\n        let song = playlist[currentSongIndex];\r\n        setCurrentSongPlaying(currentList.songs[currentSongIndex]);\r\n        player.loadVideoById(song);\r\n        player.playVideo();\r\n    }\r\n\r\n    // THIS FUNCTION INCREMENTS THE PLAYLIST SONG TO THE NEXT ONE\r\n    function incSong() {\r\n        if (currentSongIndex < playlist.length - 1) {\r\n            let idx = currentSongIndex + 1;\r\n            setCurrentSongIndex(idx);\r\n        }\r\n        else\r\n            setCurrentSongIndex(playlist.length - 1);\r\n    }\r\n\r\n    // THIS FUNCTION INCREMENTS THE PLAYLIST SONG TO THE NEXT ONE\r\n    function decSong() {\r\n        if (currentSongIndex > 0) {\r\n            let idx = currentSongIndex - 1;\r\n            setCurrentSongIndex(idx);\r\n        }\r\n        else\r\n            setCurrentSongIndex(0);\r\n    }\r\n\r\n    function onPlayerReady(event) {\r\n        setCurrentPlayer(event.target);\r\n        loadAndPlayCurrentSong(event.target);\r\n        event.target.playVideo();\r\n    }\r\n\r\n    // THIS IS OUR EVENT HANDLER FOR WHEN THE YOUTUBE PLAYER'S STATE\r\n    // CHANGES. NOTE THAT playerStatus WILL HAVE A DIFFERENT INTEGER\r\n    // VALUE TO REPRESENT THE TYPE OF STATE CHANGE. A playerStatus\r\n    // VALUE OF 0 MEANS THE SONG PLAYING HAS ENDED.\r\n    function onPlayerStateChange(event) {\r\n        let playerStatus = event.data;\r\n        let player = event.target;\r\n        if (playerStatus === -1) {\r\n            // VIDEO UNSTARTED\r\n            console.log(\"-1 Video unstarted\");\r\n        } else if (playerStatus === 0) {\r\n            // THE VIDEO HAS COMPLETED PLAYING\r\n            console.log(\"0 Video ended\");\r\n            incSong();\r\n            loadAndPlayCurrentSong(player);\r\n            //setCurrentSongPlaying(currentList.songs[currentSongIndex]);\r\n        } else if (playerStatus === 1) {\r\n            // THE VIDEO IS PLAYED\r\n            console.log(\"1 Video played\");\r\n        } else if (playerStatus === 2) {\r\n            // THE VIDEO IS PAUSED\r\n            console.log(\"2 Video paused\");\r\n        } else if (playerStatus === 3) {\r\n            // THE VIDEO IS BUFFERING\r\n            console.log(\"3 Video buffering\");\r\n        } else if (playerStatus === 5) {\r\n            // THE VIDEO HAS BEEN CUED\r\n            console.log(\"5 Video cued\");\r\n        }\r\n    }\r\n\r\n    function handleStopPlaying() {\r\n        currentPlayer.pauseVideo();\r\n    }\r\n    function handleStartPlaying() {\r\n        currentPlayer.playVideo();\r\n    }\r\n    function handleNextSong() {\r\n        incSong();\r\n        loadAndPlayCurrentSong(currentPlayer);\r\n        handleStartPlaying();\r\n    }\r\n    function handlePrevSong() {\r\n        decSong();\r\n        loadAndPlayCurrentSong(currentPlayer);\r\n        handleStartPlaying();\r\n    }\r\n\r\n    let currentSongStyle ={fontSize:15, textAlign:'center', fontFamily: 'Raleway', color:'#463f3a'}\r\n    let songPlayerButtons = {fontSize:35, color:'#463f3a'}\r\n\r\n    let playerButtons = \r\n        <div id=\"youtube-player-button\">\r\n            <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={0.5} >\r\n                <IconButton disabled={!(currentSongIndex >= 0)}>\r\n                    <FastRewind onClick={handlePrevSong} sx={songPlayerButtons}></FastRewind>\r\n                </IconButton>\r\n                <IconButton>\r\n                    <Stop onClick={handleStopPlaying} sx={songPlayerButtons}></Stop>\r\n                </IconButton>\r\n                <IconButton>\r\n                    <PlayArrow onClick={handleStartPlaying} sx={songPlayerButtons}></PlayArrow>\r\n                </IconButton>\r\n                <IconButton disabled={!(currentSongIndex < playlist.length)}>\r\n                    <FastForward onClick={handleNextSong} sx={songPlayerButtons}></FastForward>\r\n                </IconButton>\r\n            </Stack>\r\n        </div>\r\n\r\n    let currentSongText = \"\";\r\n    if (currentSongPlaying) {\r\n        currentSongText =\r\n            <div id=\"current-song-text\">\r\n                <Typography sx={currentSongStyle}><span style={{fontWeight:'bold'}}>Playlist: </span> { currentList.name }</Typography>\r\n                <Typography sx={currentSongStyle}><span style={{fontWeight:'bold'}}>Song Number: </span> { currentSongIndex + 1 }</Typography>\r\n                <Typography sx={currentSongStyle}><span style={{fontWeight:'bold'}}>Title: </span> { currentSongPlaying.title }</Typography>\r\n                <Typography sx={currentSongStyle}><span style={{fontWeight:'bold'}}>Artist: </span> { currentSongPlaying.artist }</Typography>\r\n            </div>\r\n    }\r\n    \r\n    let youtube = \r\n        <div id='empty-playlist-text'>ADD A SONG TO LOAD YOUTUBE PLAYER</div>\r\n    if (playlist.length !== 0) {\r\n        youtube = \r\n        <YouTube\r\n        videoId={playlist[currentSongIndex]}\r\n        opts={playerOptions}\r\n        onReady={onPlayerReady}\r\n        onStateChange={onPlayerStateChange} />\r\n    }\r\n\r\n    return <div>\r\n            { youtube }\r\n            <div id=\"youtube-player-text\">\r\n                <Typography \r\n                sx={{paddingTop:'1.5%', fontSize:'25px', textAlign:'center', fontWeight:'bold', color:'#463f3a'}}>\r\n                    Now Playing</Typography>\r\n            </div>\r\n            { currentSongText }\r\n            { playerButtons }\r\n        </div>;\r\n}\r\n\r\nexport default PlaylisterYoutubePlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}